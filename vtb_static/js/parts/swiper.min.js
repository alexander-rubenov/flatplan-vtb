"use strict";!function(){var e=o()?"touchstart":"mousedown",t=o()?"touchend":"mouseup",n=o()?"touchmove":"mousemove";function o(){return document.documentElement.clientWidth<1024}console.log(e);var a=document.querySelector(".other-services__swiper"),s=document.querySelector(".other-services__list"),r=parseInt(getComputedStyle(a).width),c=parseInt(getComputedStyle(s).width);window.onload=function(){var e=getComputedStyle(a).height;a.style.height="".concat(parseInt(e)+40,"px")},s.style.marginLeft="0px",a.addEventListener("".concat(e),function(e){console.log("зашел в Swipe"),a.addEventListener("mouseleave",function(){a.removeEventListener("".concat(n),h)}),console.log("прошел дальше"),a.addEventListener("".concat(t),function e(m){a.removeEventListener("".concat(n),h);var v=o()?1.2:1.5;if(f=p>=100,o()&&(v=p>=200?.3:v),f){var d=(p=p>c-r?c-r:p)/v;switch(i=u<g?"left":"right",l=parseInt(s.style.marginLeft),i){case"left":if(-l>=c-r)return;d=d>c-r+l?c-r+l:d,s.style.transition=o()?"all 0.15s":"all 0.35s",s.style.marginLeft="".concat(l-d,"px");break;case"right":if(l>=0)return;d=d>-l?-l:d,s.style.transition=o()?"all 0.15s":"all 0.35s",s.style.marginLeft="".concat(l+d,"px")}setTimeout(function(){s.style.transition="all 0s"},250),a.removeEventListener("".concat(t),e)}});var i,l,u,g=o()?e.touches[0].pageX:e.pageX,m=o()?e.touches[0].pageX:e.pageX,p=0,f=!1;function h(e){console.log("зашел в moveOn");var t=o()?e.touches[0].pageX:e.pageX,n=Math.abs(m-t);switch(l=parseInt(s.style.marginLeft),t<m?i="left":t>m?i="right":(t=m)&&(i=i),i){case"left":if(-l>=c-r)return;s.style.marginLeft="".concat(l-n,"px");break;case"right":if(l>=0)return;s.style.marginLeft="".concat(l+n,"px")}p+=n,m=t,u=o()?e.touches[0].pageX:e.pageX}a.addEventListener("".concat(n),h),console.log("дальше")})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhcnRzL3N3aXBlci5qcyJdLCJuYW1lcyI6WyJzdGFydEV2ZW50IiwidG91Y2hEZXZpY2UiLCJlbmRFdmVudCIsImRvY3VtZW50IiwiZG9jdW1lbnRFbGVtZW50IiwiY2xpZW50V2lkdGgiLCJjb25zb2xlIiwibG9nIiwic3dpcGVyTGlzdCIsInF1ZXJ5U2VsZWN0b3IiLCJzd2lwZXJXaWR0aCIsInBhcnNlSW50IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInN3aXBlckxpc3RXaWR0aCIsIndpZHRoIiwic3dpcGVyIiwic3R5bGUiLCJoZWlnaHQiLCJoZWlnaHRPZlN3aXBlciIsImNvbmNhdCIsIm1hcmdpbkxlZnQiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJzd2l0Y2hPZmZTd2lwZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwibW92ZUV2ZW50Iiwic3dpcGVNb3VzZU1vdmVPbiIsIndheVRvV2hpY2hTd2lwZUlzTWFkZSIsInN3aXBlTW91c2VNb3ZlT2ZmIiwic3dpcGVMaXN0TWFyZ2luTGVmdCIsImFkZGl0aW9uYWxTd2lwZURpc3RhbmNlIiwidHJhbnNpdGlvbiIsInN3aXBlU3BlZWQiLCJzdW1tU3dpcGVEaXN0YW5jZSIsInNldFRpbWVvdXQiLCJsYXN0Q3Vyc29yUG9zaXRpb24iLCJmaXJzdEN1cnNvclBvc2l0aW9uIiwiaXNGYXN0U3dpcGUiLCJzd2lwZURpc3RhbmNlIiwidG91Y2hlcyIsInBhZ2VYIiwibmV3Q3Vyc29yUG9zaXRpb24iLCJpbml0aWFsQ3Vyc29yUG9zaXRpb24iLCJNYXRoIiwiYWJzIl0sIm1hcHBpbmdzIjoiY0FBQSxXQUFDLElBQUFBLEVBQU1DLElBQUEsYUFBQSxZQUVHRCxFQUFhQyxJQUFnQixXQUFMLFVBQ3hCQyxFQUFXRCxJQUFnQixZQUFZLFlBSzdDLFNBQVNBLElBRUwsT0FEb0JFLFNBQVNDLGdCQUFnQkMsWUFDdEMsS0FKWEMsUUFBUUMsSUFBSVAsR0FPWixJQUVJUSxFQUFVTCxTQUFHQSxjQUFTTSwyQkFDdEJD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UUFBUSxHQUFHQyxNQUFRbEIsRUFBTWtCLE1BbEN4RXpCLEVBQU9NLGlCQUFQLEdBQUFGLE9BQTJCTSxHQUFhQyxHQWFwQ0csUUFBQUEsSUFBQUEsWUFqRVoiLCJmaWxlIjoicGFydHMvc3dpcGVyLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIigoKSA9PiB7XHJcblxyXG4gICAgY29uc3Qgc3RhcnRFdmVudCA9IHRvdWNoRGV2aWNlKCkgPyAndG91Y2hzdGFydCc6ICdtb3VzZWRvd24nO1xyXG4gICAgY29uc3QgZW5kRXZlbnQgPSB0b3VjaERldmljZSgpID8gJ3RvdWNoZW5kJzogJ21vdXNldXAnO1xyXG4gICAgY29uc3QgbW92ZUV2ZW50ID0gdG91Y2hEZXZpY2UoKSA/ICd0b3VjaG1vdmUnOiAnbW91c2Vtb3ZlJztcclxuXHJcbiAgICBjb25zb2xlLmxvZyhzdGFydEV2ZW50KTtcclxuXHJcbiAgICBmdW5jdGlvbiB0b3VjaERldmljZSgpIHtcclxuICAgICAgICBjb25zdCBkZXZpY2VXaWR0aCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aDtcclxuICAgICAgICByZXR1cm4gKGRldmljZVdpZHRoIDwgMTAyNCkgPyB0cnVlIDogZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0XHJcbiAgICAgICAgc3dpcGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm90aGVyLXNlcnZpY2VzX19zd2lwZXInKSxcclxuICAgICAgICBzd2lwZXJMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm90aGVyLXNlcnZpY2VzX19saXN0JyksXHJcbiAgICAgICAgc3dpcGVyV2lkdGggPSBwYXJzZUludChnZXRDb21wdXRlZFN0eWxlKHN3aXBlcikud2lkdGgpLFxyXG4gICAgICAgIHN3aXBlckxpc3RXaWR0aCA9IHBhcnNlSW50KGdldENvbXB1dGVkU3R5bGUoc3dpcGVyTGlzdCkud2lkdGgpO1xyXG5cclxuXHJcbiAgICB3aW5kb3cub25sb2FkID0gKCkgPT4ge1xyXG4gICAgICAgIGxldCBoZWlnaHRPZlN3aXBlciA9IGdldENvbXB1dGVkU3R5bGUoc3dpcGVyKS5oZWlnaHQ7XHJcbiAgICAgICAgc3dpcGVyLnN0eWxlLmhlaWdodCA9IGAke3BhcnNlSW50KGhlaWdodE9mU3dpcGVyKSArIDQwfXB4YDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgc3dpcGVyTGlzdC5zdHlsZS5tYXJnaW5MZWZ0ID0gJzBweCc7XHJcblxyXG5cclxuICAgIGZ1bmN0aW9uIHN3aXBlKGV2ZW50KSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ9C30LDRiNC10Lsg0LIgU3dpcGUnKTtcclxuXHJcbiAgICAgICAgc3dpcGVyLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBzd2l0Y2hPZmZTd2lwZXIpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCfQv9GA0L7RiNC10Lsg0LTQsNC70YzRiNC1Jyk7XHJcbiAgICAgICAgZnVuY3Rpb24gc3dpdGNoT2ZmU3dpcGVyKCkge1xyXG4gICAgICAgICAgICBzd2lwZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihgJHttb3ZlRXZlbnR9YCwgc3dpcGVNb3VzZU1vdmVPbik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBcclxuICAgICAgICBzd2lwZXIuYWRkRXZlbnRMaXN0ZW5lcihgJHtlbmRFdmVudH1gLCBzd2lwZU1vdXNlTW92ZU9mZik7IC8vIDwtLS0g0L/QvtC/0YDQvtCx0YPQuSDRgdGO0LTQsCDQstGB0YLQsNCy0LjRgtGMIGxhc3QgY3Vyc29yIHBvc1xyXG5cclxuICAgICAgICBsZXRcclxuICAgICAgICAgICAgZmlyc3RDdXJzb3JQb3NpdGlvbiA9IHRvdWNoRGV2aWNlKCkgPyBldmVudC50b3VjaGVzWzBdLnBhZ2VYIDogZXZlbnQucGFnZVgsXHJcbiAgICAgICAgICAgIGluaXRpYWxDdXJzb3JQb3NpdGlvbiA9IHRvdWNoRGV2aWNlKCkgPyBldmVudC50b3VjaGVzWzBdLnBhZ2VYIDogZXZlbnQucGFnZVgsXHJcbiAgICAgICAgICAgIHN1bW1Td2lwZURpc3RhbmNlID0gMCxcclxuICAgICAgICAgICAgd2F5VG9XaGljaFN3aXBlSXNNYWRlLFxyXG4gICAgICAgICAgICBzd2lwZUxpc3RNYXJnaW5MZWZ0LFxyXG4gICAgICAgICAgICBpc0Zhc3RTd2lwZSA9IGZhbHNlO1xyXG5cclxuXHJcbiAgICAgICAgbGV0IGxhc3RDdXJzb3JQb3NpdGlvbjtcclxuXHJcbiAgICAgICAgc3dpcGVyLmFkZEV2ZW50TGlzdGVuZXIoYCR7bW92ZUV2ZW50fWAsIHN3aXBlTW91c2VNb3ZlT24pO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCfQtNCw0LvRjNGI0LUnKTtcclxuICAgICAgICBmdW5jdGlvbiBzd2lwZU1vdXNlTW92ZU9uKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCfQt9Cw0YjQtdC7INCyIG1vdmVPbicpO1xyXG5cclxuICAgICAgICAgICAgbGV0XHJcbiAgICAgICAgICAgICAgICBuZXdDdXJzb3JQb3NpdGlvbiA9IHRvdWNoRGV2aWNlKCkgPyBldmVudC50b3VjaGVzWzBdLnBhZ2VYIDogZXZlbnQucGFnZVgsXHJcbiAgICAgICAgICAgICAgICAvLyB0ZXN0ID0gZXZlbnQudG91Y2hlc1swXS5wYWdlWCxcclxuICAgICAgICAgICAgICAgIHN3aXBlRGlzdGFuY2UgPSBNYXRoLmFicyhpbml0aWFsQ3Vyc29yUG9zaXRpb24gLSBuZXdDdXJzb3JQb3NpdGlvbik7XHJcblxyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhuZXdDdXJzb3JQb3NpdGlvbik7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHRlc3QpO1xyXG5cclxuICAgICAgICAgICAgc3dpcGVMaXN0TWFyZ2luTGVmdCA9IHBhcnNlSW50KHN3aXBlckxpc3Quc3R5bGUubWFyZ2luTGVmdCk7XHJcblxyXG4gICAgICAgICAgICBpZiAobmV3Q3Vyc29yUG9zaXRpb24gPCBpbml0aWFsQ3Vyc29yUG9zaXRpb24pIHdheVRvV2hpY2hTd2lwZUlzTWFkZSA9ICdsZWZ0JztcclxuICAgICAgICAgICAgZWxzZSBpZiAobmV3Q3Vyc29yUG9zaXRpb24gPiBpbml0aWFsQ3Vyc29yUG9zaXRpb24pIHdheVRvV2hpY2hTd2lwZUlzTWFkZSA9ICdyaWdodCc7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKG5ld0N1cnNvclBvc2l0aW9uID0gaW5pdGlhbEN1cnNvclBvc2l0aW9uKSB3YXlUb1doaWNoU3dpcGVJc01hZGUgPSB3YXlUb1doaWNoU3dpcGVJc01hZGU7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBzd2l0Y2god2F5VG9XaGljaFN3aXBlSXNNYWRlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdsZWZ0JzpcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKC1zd2lwZUxpc3RNYXJnaW5MZWZ0ID49IChzd2lwZXJMaXN0V2lkdGggLSBzd2lwZXJXaWR0aCkpIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICBzd2lwZXJMaXN0LnN0eWxlLm1hcmdpbkxlZnQgPSBgJHtzd2lwZUxpc3RNYXJnaW5MZWZ0IC0gc3dpcGVEaXN0YW5jZX1weGA7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSAncmlnaHQnOlxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzd2lwZUxpc3RNYXJnaW5MZWZ0ID49IDAgKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgc3dpcGVyTGlzdC5zdHlsZS5tYXJnaW5MZWZ0ID0gYCR7c3dpcGVMaXN0TWFyZ2luTGVmdCArIHN3aXBlRGlzdGFuY2V9cHhgO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdW1tU3dpcGVEaXN0YW5jZSArPSBzd2lwZURpc3RhbmNlO1xyXG4gICAgICAgICAgICBpbml0aWFsQ3Vyc29yUG9zaXRpb24gPSBuZXdDdXJzb3JQb3NpdGlvbjtcclxuICAgICAgICAgICAgbGFzdEN1cnNvclBvc2l0aW9uID0gdG91Y2hEZXZpY2UoKSA/IGV2ZW50LnRvdWNoZXNbMF0ucGFnZVggOiBldmVudC5wYWdlWDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHN3aXBlTW91c2VNb3ZlT2ZmKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIHN3aXBlci5yZW1vdmVFdmVudExpc3RlbmVyKGAke21vdmVFdmVudH1gLCBzd2lwZU1vdXNlTW92ZU9uKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGxldCBzd2lwZVNwZWVkID0gdG91Y2hEZXZpY2UoKSA/IDEuMiA6IDEuNTtcclxuXHJcbiAgICAgICAgICAgIGlzRmFzdFN3aXBlID0gKHN1bW1Td2lwZURpc3RhbmNlID49IDEwMCkgPyB0cnVlIDogZmFsc2U7XHJcblxyXG4gICAgICAgICAgICBpZiAodG91Y2hEZXZpY2UoKSkge1xyXG4gICAgICAgICAgICAgICAgc3dpcGVTcGVlZCA9IChzdW1tU3dpcGVEaXN0YW5jZSA+PSAyMDApID8gMC4zIDogc3dpcGVTcGVlZDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCFpc0Zhc3RTd2lwZSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgc3VtbVN3aXBlRGlzdGFuY2UgPSAoc3VtbVN3aXBlRGlzdGFuY2UgPiAoc3dpcGVyTGlzdFdpZHRoIC0gc3dpcGVyV2lkdGgpKSA/IChzd2lwZXJMaXN0V2lkdGggLSBzd2lwZXJXaWR0aCkgOiBzdW1tU3dpcGVEaXN0YW5jZTtcclxuXHJcbiAgICAgICAgICAgIC8vIGxldCBzd2lwZVNwZWVkID0gdG91Y2hEZXZpY2UoKSA/IDAuNzUgOiAxLjU7XHJcbiAgICAgICAgICAgIGxldCBhZGRpdGlvbmFsU3dpcGVEaXN0YW5jZSA9IChzdW1tU3dpcGVEaXN0YW5jZSAvIHN3aXBlU3BlZWQpOyAvLyA8LS0tLSBjaGFuZ2Ugc3dpcGUgc3BlZWQsIGZvciBleGFtcGxlOiAoc3VtbVN3aXBlRGlzdGFuY2UgLyAyLjUpXHJcblxyXG5cclxuICAgICAgICAgICAgLy8gbGV0IGxhc3RDdXJzb3JQb3NpdGlvbiA9IHRvdWNoRGV2aWNlKCkgPyBldmVudC50b3VjaGVzWzBdLnBhZ2VYIDogZXZlbnQucGFnZVg7XHJcbiAgICAgICAgICAgIHdheVRvV2hpY2hTd2lwZUlzTWFkZSA9IChsYXN0Q3Vyc29yUG9zaXRpb24gPCBmaXJzdEN1cnNvclBvc2l0aW9uKSA/ICdsZWZ0JyA6ICdyaWdodCc7XHJcblxyXG4gICAgICAgICAgICBzd2lwZUxpc3RNYXJnaW5MZWZ0ID0gcGFyc2VJbnQoc3dpcGVyTGlzdC5zdHlsZS5tYXJnaW5MZWZ0KTtcclxuXHJcbiAgICAgICAgICAgIHN3aXRjaCh3YXlUb1doaWNoU3dpcGVJc01hZGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2xlZnQnOlxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoLXN3aXBlTGlzdE1hcmdpbkxlZnQgPj0gKHN3aXBlckxpc3RXaWR0aCAtIHN3aXBlcldpZHRoKSkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGFkZGl0aW9uYWxTd2lwZURpc3RhbmNlID0gKGFkZGl0aW9uYWxTd2lwZURpc3RhbmNlID4gKChzd2lwZXJMaXN0V2lkdGggLSBzd2lwZXJXaWR0aCkgKyBzd2lwZUxpc3RNYXJnaW5MZWZ0KSkgPyAoKHN3aXBlckxpc3RXaWR0aCAtIHN3aXBlcldpZHRoKSArIHN3aXBlTGlzdE1hcmdpbkxlZnQpIDogYWRkaXRpb25hbFN3aXBlRGlzdGFuY2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHN3aXBlckxpc3Quc3R5bGUudHJhbnNpdGlvbiA9IHRvdWNoRGV2aWNlKCkgPyAnYWxsIDAuMTVzJyA6ICdhbGwgMC4zNXMnO1xyXG4gICAgICAgICAgICAgICAgICAgIHN3aXBlckxpc3Quc3R5bGUubWFyZ2luTGVmdCA9IGAke3N3aXBlTGlzdE1hcmdpbkxlZnQgLSBhZGRpdGlvbmFsU3dpcGVEaXN0YW5jZX1weGA7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSAncmlnaHQnOlxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzd2lwZUxpc3RNYXJnaW5MZWZ0ID49IDAgKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGFkZGl0aW9uYWxTd2lwZURpc3RhbmNlID0gKGFkZGl0aW9uYWxTd2lwZURpc3RhbmNlID4gLXN3aXBlTGlzdE1hcmdpbkxlZnQpID8gLXN3aXBlTGlzdE1hcmdpbkxlZnQgOiBhZGRpdGlvbmFsU3dpcGVEaXN0YW5jZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc3dpcGVyTGlzdC5zdHlsZS50cmFuc2l0aW9uID0gdG91Y2hEZXZpY2UoKSA/ICdhbGwgMC4xNXMnIDogJ2FsbCAwLjM1cyc7XHJcbiAgICAgICAgICAgICAgICAgICAgc3dpcGVyTGlzdC5zdHlsZS5tYXJnaW5MZWZ0ID0gYCR7c3dpcGVMaXN0TWFyZ2luTGVmdCArIGFkZGl0aW9uYWxTd2lwZURpc3RhbmNlfXB4YDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBzd2lwZXJMaXN0LnN0eWxlLnRyYW5zaXRpb24gPSAnYWxsIDBzJztcclxuICAgICAgICAgICAgfSwgMjUwKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHN3aXBlci5yZW1vdmVFdmVudExpc3RlbmVyKGAke2VuZEV2ZW50fWAsIHN3aXBlTW91c2VNb3ZlT2ZmKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgXHJcblxyXG4gICAgc3dpcGVyLmFkZEV2ZW50TGlzdGVuZXIoYCR7c3RhcnRFdmVudH1gLCBzd2lwZSk7XHJcbn0pKCk7Il19
