"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function(e,t){"object"===("undefined"==typeof exports?"undefined":_typeof(exports))&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):window.mediumZoom=t()}(0,function(){var e=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var o=arguments[t];for(var n in o)Object.prototype.hasOwnProperty.call(o,n)&&(e[n]=o[n])}return e},t=function(e){return"IMG"===e.tagName},o=function(e){return e&&1===e.nodeType},n=function(e){return".svg"===(e.currentSrc||e.src).substr(-4).toLowerCase()},i=function(e){try{return Array.isArray(e)?e.filter(t):function(e){return NodeList.prototype.isPrototypeOf(e)}(e)?[].slice.call(e).filter(t):o(e)?[e].filter(t):"string"==typeof e?[].slice.call(document.querySelectorAll(e)).filter(t):[]}catch(e){throw new TypeError("The provided selector is invalid.\nExpects a CSS selector, a Node element, a NodeList or an array.\nSee: https://github.com/francoischalifour/medium-zoom")}},r=function(t,o){var n=e({bubbles:!1,cancelable:!1,detail:void 0},o);if("function"==typeof window.CustomEvent)return new CustomEvent(t,n);var i=document.createEvent("CustomEvent");return i.initCustomEvent(t,n.bubbles,n.cancelable,n.detail),i};return function(e,t){void 0===t&&(t={});var o=t.insertAt;if(e&&"undefined"!=typeof document){var n=document.head||document.getElementsByTagName("head")[0],i=document.createElement("style");i.type="text/css","top"===o&&n.firstChild?n.insertBefore(i,n.firstChild):n.appendChild(i),i.styleSheet?i.styleSheet.cssText=e:i.appendChild(document.createTextNode(e))}}(".medium-zoom-overlay{position:fixed;top:0;right:0;bottom:0;left:0;opacity:0;transition:opacity .3s;will-change:opacity}.medium-zoom--opened .medium-zoom-overlay{cursor:pointer;cursor:zoom-out;opacity:1}.medium-zoom-image{cursor:pointer;cursor:zoom-in;transition:transform .3s cubic-bezier(.2,0,.2,1)}.medium-zoom-image--hidden{visibility:hidden}.medium-zoom-image--opened{position:relative;cursor:pointer;cursor:zoom-out;will-change:transform}"),function t(d){var a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},c=window.Promise||function(e){function t(){}e(t,t)},l=function(){for(var e=arguments.length,t=Array(e),o=0;o<e;o++)t[o]=arguments[o];var n=t.reduce(function(e,t){return[].concat(e,i(t))},[]);return n.filter(function(e){return-1===f.indexOf(e)}).forEach(function(e){f.push(e),e.classList.add("medium-zoom-image")}),p.forEach(function(e){var t=e.type,o=e.listener,i=e.options;n.forEach(function(e){e.addEventListener(t,o,i)})}),z},m=function(){var t=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).target,i=function(){var t={width:document.documentElement.clientWidth,height:document.documentElement.clientHeight,left:0,top:0,right:0,bottom:0},i=void 0,r=void 0;if(y.container)if(y.container instanceof Object)i=(t=e({},t,y.container)).width-t.left-t.right-2*y.margin,r=t.height-t.top-t.bottom-2*y.margin;else{var d=(o(y.container)?y.container:document.querySelector(y.container)).getBoundingClientRect(),a=d.width,c=d.height,l=d.left,m=d.top;t=e({},t,{width:a,height:c,left:l,top:m})}i=i||t.width-2*y.margin,r=r||t.height-2*y.margin;var s=h.zoomedHd||h.original,u=n(s)?i:s.naturalWidth||i,f=n(s)?r:s.naturalHeight||r,p=s.getBoundingClientRect(),v=p.top,g=p.left,b=p.width,z=p.height,E=Math.min(u,i)/b,w=Math.min(f,r)/z,L=Math.min(E,w),S="scale("+L+") translate3d("+((i-b)/2-g+y.margin+t.left)/L+"px, "+((r-z)/2-v+y.margin+t.top)/L+"px, 0)";h.zoomed.style.transform=S,h.zoomedHd&&(h.zoomedHd.style.transform=S)};return new c(function(e){if(t&&-1===f.indexOf(t))e(z);else if(h.zoomed)e(z);else{if(t)h.original=t;else{if(!(f.length>0))return void e(z);var n=f;h.original=n[0]}if(h.original.dispatchEvent(r("medium-zoom:open",{detail:{zoom:z}})),g=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0,v=!0,h.zoomed=function(e){var t=e.getBoundingClientRect(),o=t.top,n=t.left,i=t.width,r=t.height,d=e.cloneNode(),a=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0,c=window.pageXOffset||document.documentElement.scrollLeft||document.body.scrollLeft||0;return d.removeAttribute("id"),d.style.position="absolute",d.style.top=o+a+"px",d.style.left=n+c+"px",d.style.width=i+"px",d.style.height=r+"px",d.style.transform="",d}(h.original),document.body.appendChild(b),y.template){var d=o(y.template)?y.template:document.querySelector(y.template);h.template=document.createElement("div"),h.template.appendChild(d.content.cloneNode(!0)),document.body.appendChild(h.template)}if(document.body.appendChild(h.zoomed),window.requestAnimationFrame(function(){document.body.classList.add("medium-zoom--opened")}),h.original.classList.add("medium-zoom-image--hidden"),h.zoomed.classList.add("medium-zoom-image--opened"),h.zoomed.addEventListener("click",s),h.zoomed.addEventListener("transitionend",function t(){v=!1,h.zoomed.removeEventListener("transitionend",t),h.original.dispatchEvent(r("medium-zoom:opened",{detail:{zoom:z}})),e(z)}),h.original.getAttribute("data-zoom-src")){h.zoomedHd=h.zoomed.cloneNode(),h.zoomedHd.removeAttribute("srcset"),h.zoomedHd.removeAttribute("sizes"),h.zoomedHd.src=h.zoomed.getAttribute("data-zoom-src"),h.zoomedHd.onerror=function(){clearInterval(a),console.warn("Unable to reach the zoom image target "+h.zoomedHd.src),h.zoomedHd=null,i()};var a=setInterval(function(){h.zoomedHd.complete&&(clearInterval(a),h.zoomedHd.classList.add("medium-zoom-image--opened"),h.zoomedHd.addEventListener("click",s),document.body.appendChild(h.zoomedHd),i())},10)}else if(h.original.hasAttribute("srcset")){h.zoomedHd=h.zoomed.cloneNode(),h.zoomedHd.removeAttribute("sizes");var c=h.zoomedHd.addEventListener("load",function(){h.zoomedHd.removeEventListener("load",c),h.zoomedHd.classList.add("medium-zoom-image--opened"),h.zoomedHd.addEventListener("click",s),document.body.appendChild(h.zoomedHd),i()})}else i()}})},s=function(){return new c(function(e){!v&&h.original?(v=!0,document.body.classList.remove("medium-zoom--opened"),h.zoomed.style.transform="",h.zoomedHd&&(h.zoomedHd.style.transform=""),h.template&&(h.template.style.transition="opacity 150ms",h.template.style.opacity=0),h.original.dispatchEvent(r("medium-zoom:close",{detail:{zoom:z}})),h.zoomed.addEventListener("transitionend",function t(){h.original.classList.remove("medium-zoom-image--hidden"),document.body.removeChild(h.zoomed),h.zoomedHd&&document.body.removeChild(h.zoomedHd),document.body.removeChild(b),h.zoomed.classList.remove("medium-zoom-image--opened"),h.template&&document.body.removeChild(h.template),v=!1,h.zoomed.removeEventListener("transitionend",t),h.original.dispatchEvent(r("medium-zoom:closed",{detail:{zoom:z}})),h.original=null,h.zoomed=null,h.zoomedHd=null,h.template=null,e(z)})):e(z)})},u=function(){var e=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).target;return h.original?s():m({target:e})},f=[],p=[],v=!1,g=0,y=a,h={original:null,zoomed:null,zoomedHd:null,template:null};"[object Object]"===Object.prototype.toString.call(d)?y=d:(d||"string"==typeof d)&&l(d);var b=function(e){var t=document.createElement("div");return t.classList.add("medium-zoom-overlay"),t.style.background=e,t}((y=e({margin:0,background:"#fff",scrollOffset:40,container:null,template:null},y)).background);document.addEventListener("click",function(e){var t=e.target;t!==b?-1!==f.indexOf(t)&&u({target:t}):s()}),document.addEventListener("keyup",function(e){27===(e.keyCode||e.which)&&s()}),document.addEventListener("scroll",function(){if(!v&&h.original){var e=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0;Math.abs(g-e)>y.scrollOffset&&setTimeout(s,150)}}),window.addEventListener("resize",s);var z={open:m,close:s,toggle:u,update:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t;if(t.background&&(b.style.background=t.background),t.container&&t.container instanceof Object&&(n.container=e({},y.container,t.container)),t.template){var i=o(t.template)?t.template:document.querySelector(t.template);n.template=i}return y=e({},y,n),f.forEach(function(e){e.dispatchEvent(r("medium-zoom:update",{detail:{zoom:z}}))}),z},clone:function(){var o=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return t(e({},y,o))},attach:l,detach:function(){for(var e=arguments.length,t=Array(e),o=0;o<e;o++)t[o]=arguments[o];h.zoomed&&s();var n=t.length>0?t.reduce(function(e,t){return[].concat(e,i(t))},[]):f;return n.forEach(function(e){e.classList.remove("medium-zoom-image"),e.dispatchEvent(r("medium-zoom:detach",{detail:{zoom:z}}))}),f=f.filter(function(e){return-1===n.indexOf(e)}),z},on:function(e,t){var o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return f.forEach(function(n){n.addEventListener("medium-zoom:"+e,t,o)}),p.push({type:"medium-zoom:"+e,listener:t,options:o}),z},off:function(e,t){var o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return f.forEach(function(n){n.removeEventListener("medium-zoom:"+e,t,o)}),p=p.filter(function(o){return!(o.type==="medium-zoom:"+e&&o.listener.toString()===t.toString())}),z},getOptions:function(){return y},getImages:function(){return f},getZoomedImage:function(){return h.original}};return z}}),function(){var e=document.querySelector(".other-services__swiper"),t=document.querySelector(".other-services__list"),o=parseInt(getComputedStyle(e).width),n=parseInt(getComputedStyle(t).width);window.onload=function(){var t=getComputedStyle(e).height;e.style.height="".concat(parseInt(t)+40,"px")},t.style.marginLeft="0px",e.addEventListener("mousedown",function(i){e.addEventListener("mouseleave",function(){e.removeEventListener("mousemove",m)}),e.addEventListener("mouseup",function i(c){if(e.removeEventListener("mousemove",m),l>=100){var s=(l=l>n-o?n-o:l)/1.5,u=c.pageX;switch(r=u<a?"left":"right",d=parseInt(t.style.marginLeft),r){case"left":if(-d>=n-o)return;s=s>n-o+d?n-o+d:s,t.style.transition="all 0.35s",t.style.marginLeft="".concat(d-s,"px");break;case"right":if(d>=0)return;s=s>-d?-d:s,t.style.transition="all 0.35s",t.style.marginLeft="".concat(d+s,"px")}setTimeout(function(){t.style.transition="all 0s"},250),e.removeEventListener("mouseup",i)}});var r,d,a=i.pageX,c=i.pageX,l=0;function m(e){var i=e.pageX,a=Math.abs(c-i);switch(d=parseInt(t.style.marginLeft),i<c?r="left":i>c?r="right":(i=c)&&(r=r),r){case"left":if(-d>=n-o)return;t.style.marginLeft="".concat(d-a,"px");break;case"right":if(d>=0)return;t.style.marginLeft="".concat(d+a,"px")}l+=a,c=i}e.addEventListener("mousemove",m)})}(),function(){var e,t=document.querySelectorAll("*[data-modal-target]"),o=document.querySelectorAll("*[data-modal-close]"),n=function(t){var o=t.currentTarget,n=o.dataset.modalTarget,d=document.getElementById(n);void 0!==e&&a(e),"service-example"===n&&function(e,t){var o=e.parentElement.querySelector(".what-you-get__item-title").textContent.replace(/\s+/g," ").trim(),n=t.querySelector(".modal__title"),i=e.dataset.modalServiceExampleImage,r=t.querySelector(".modal__image");n.textContent=o,r.src=i}(o,d),e=n,d.classList.add("visible"),document.querySelector("body").classList.add("fixed"),window.addEventListener("click",r),window.addEventListener("keydown",i);var c=d.querySelectorAll('a[href]:not([disabled]), button:not([disabled]), textarea:not([disabled]), input[type="text"]:not([disabled]), input[type="radio"]:not([disabled]), input[type="checkbox"]:not([disabled]), select:not([disabled])'),l=c[0],m=c[c.length-1];d.addEventListener("keydown",function(e){"Tab"!==e.key&&9!==e.keyCode||(e.shiftKey?document.activeElement===l&&(e.preventDefault(),m.focus()):document.activeElement===m&&(e.preventDefault(),l.focus()))})},i=function(t){"Escape"===t.key&&a(e)},r=function(t){t.target.classList.contains("modal__bg")&&a(e)},d=function(e){return a(e.currentTarget.dataset.modalClose)},a=function(e){document.getElementById(e).classList.remove("visible"),document.querySelector("body").classList.remove("fixed"),window.removeEventListener("click",r),window.removeEventListener("keydown",i)};o.forEach(function(e){return e.addEventListener("click",d)}),window.modals={openModalWindow:n,closeModalWindow:a},function(){var e=!0,o=!1,i=void 0;try{for(var r,d=t[Symbol.iterator]();!(e=(r=d.next()).done);e=!0)r.value.addEventListener("click",n)}catch(e){o=!0,i=e}finally{try{e||null==d.return||d.return()}finally{if(o)throw i}}}()}(),function(){var e=document.querySelectorAll("*[data-scroll-link]"),t=function(e){var t=e.target,o=document.getElementById(t.dataset.scrollLink);o&&o.scrollIntoView({behavior:"smooth"})};Boolean(e)&&e.forEach(function(e){return e.addEventListener("click",t)})}(),document.addEventListener("DOMContentLoaded",function(){var e=[].slice.call(document.querySelectorAll("picture.lazy"));if("IntersectionObserver"in window){var t=new IntersectionObserver(function(e,o){e.forEach(function(e){if(e.isIntersecting){var o=e.target,n=o.querySelector('[type="image/webp"]'),i=o.querySelector("img");n.srcset=n.dataset.src,i.src=i.dataset.src,o.setAttribute("data-picture","opacity-1"),o.classList.remove("lazy"),t.unobserve(o)}})});e.forEach(function(e){t.observe(e)})}}),document.addEventListener("DOMContentLoaded",function(){var e=[].slice.call(document.querySelectorAll(".smooth-display-block"));if("IntersectionObserver"in window){var t=new IntersectionObserver(function(e,o){e.forEach(function(e){if(e.isIntersecting){var o=e.target;o.setAttribute("data-smooth-display-block","active"),t.unobserve(o)}})});e.forEach(function(e){t.observe(e)})}}),mediumZoom("[data-zoomable]");
//# sourceMappingURL=data:application/json;charset=utf8;base64,
