"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function(e,t){"object"===("undefined"==typeof exports?"undefined":_typeof(exports))&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):window.mediumZoom=t()}(0,function(){var e=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var o=arguments[t];for(var n in o)Object.prototype.hasOwnProperty.call(o,n)&&(e[n]=o[n])}return e},t=function(e){return"IMG"===e.tagName},o=function(e){return e&&1===e.nodeType},n=function(e){return".svg"===(e.currentSrc||e.src).substr(-4).toLowerCase()},i=function(e){try{return Array.isArray(e)?e.filter(t):function(e){return NodeList.prototype.isPrototypeOf(e)}(e)?[].slice.call(e).filter(t):o(e)?[e].filter(t):"string"==typeof e?[].slice.call(document.querySelectorAll(e)).filter(t):[]}catch(e){throw new TypeError("The provided selector is invalid.\nExpects a CSS selector, a Node element, a NodeList or an array.\nSee: https://github.com/francoischalifour/medium-zoom")}},r=function(t,o){var n=e({bubbles:!1,cancelable:!1,detail:void 0},o);if("function"==typeof window.CustomEvent)return new CustomEvent(t,n);var i=document.createEvent("CustomEvent");return i.initCustomEvent(t,n.bubbles,n.cancelable,n.detail),i};return function(e,t){void 0===t&&(t={});var o=t.insertAt;if(e&&"undefined"!=typeof document){var n=document.head||document.getElementsByTagName("head")[0],i=document.createElement("style");i.type="text/css","top"===o&&n.firstChild?n.insertBefore(i,n.firstChild):n.appendChild(i),i.styleSheet?i.styleSheet.cssText=e:i.appendChild(document.createTextNode(e))}}(".medium-zoom-overlay{position:fixed;top:0;right:0;bottom:0;left:0;opacity:0;transition:opacity .3s;will-change:opacity}.medium-zoom--opened .medium-zoom-overlay{cursor:pointer;cursor:zoom-out;opacity:1}.medium-zoom-image{cursor:pointer;cursor:zoom-in;transition:transform .3s cubic-bezier(.2,0,.2,1)}.medium-zoom-image--hidden{visibility:hidden}.medium-zoom-image--opened{position:relative;cursor:pointer;cursor:zoom-out;will-change:transform}"),function t(d){var a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},l=window.Promise||function(e){function t(){}e(t,t)},m=function(){for(var e=arguments.length,t=Array(e),o=0;o<e;o++)t[o]=arguments[o];var n=t.reduce(function(e,t){return[].concat(e,i(t))},[]);return n.filter(function(e){return-1===f.indexOf(e)}).forEach(function(e){f.push(e),e.classList.add("medium-zoom-image")}),p.forEach(function(e){var t=e.type,o=e.listener,i=e.options;n.forEach(function(e){e.addEventListener(t,o,i)})}),b},c=function(){var t=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).target,i=function(){var t={width:document.documentElement.clientWidth,height:document.documentElement.clientHeight,left:0,top:0,right:0,bottom:0},i=void 0,r=void 0;if(y.container)if(y.container instanceof Object)i=(t=e({},t,y.container)).width-t.left-t.right-2*y.margin,r=t.height-t.top-t.bottom-2*y.margin;else{var d=(o(y.container)?y.container:document.querySelector(y.container)).getBoundingClientRect(),a=d.width,l=d.height,m=d.left,c=d.top;t=e({},t,{width:a,height:l,left:m,top:c})}i=i||t.width-2*y.margin,r=r||t.height-2*y.margin;var u=h.zoomedHd||h.original,s=n(u)?i:u.naturalWidth||i,f=n(u)?r:u.naturalHeight||r,p=u.getBoundingClientRect(),v=p.top,g=p.left,z=p.width,b=p.height,E=Math.min(s,i)/z,w=Math.min(f,r)/b,L=Math.min(E,w),S="scale("+L+") translate3d("+((i-z)/2-g+y.margin+t.left)/L+"px, "+((r-b)/2-v+y.margin+t.top)/L+"px, 0)";h.zoomed.style.transform=S,h.zoomedHd&&(h.zoomedHd.style.transform=S)};return new l(function(e){if(t&&-1===f.indexOf(t))e(b);else if(h.zoomed)e(b);else{if(t)h.original=t;else{if(!(f.length>0))return void e(b);var n=f;h.original=n[0]}if(h.original.dispatchEvent(r("medium-zoom:open",{detail:{zoom:b}})),g=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0,v=!0,h.zoomed=function(e){var t=e.getBoundingClientRect(),o=t.top,n=t.left,i=t.width,r=t.height,d=e.cloneNode(),a=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0,l=window.pageXOffset||document.documentElement.scrollLeft||document.body.scrollLeft||0;return d.removeAttribute("id"),d.style.position="absolute",d.style.top=o+a+"px",d.style.left=n+l+"px",d.style.width=i+"px",d.style.height=r+"px",d.style.transform="",d}(h.original),document.body.appendChild(z),y.template){var d=o(y.template)?y.template:document.querySelector(y.template);h.template=document.createElement("div"),h.template.appendChild(d.content.cloneNode(!0)),document.body.appendChild(h.template)}if(document.body.appendChild(h.zoomed),window.requestAnimationFrame(function(){document.body.classList.add("medium-zoom--opened")}),h.original.classList.add("medium-zoom-image--hidden"),h.zoomed.classList.add("medium-zoom-image--opened"),h.zoomed.addEventListener("click",u),h.zoomed.addEventListener("transitionend",function t(){v=!1,h.zoomed.removeEventListener("transitionend",t),h.original.dispatchEvent(r("medium-zoom:opened",{detail:{zoom:b}})),e(b)}),h.original.getAttribute("data-zoom-src")){h.zoomedHd=h.zoomed.cloneNode(),h.zoomedHd.removeAttribute("srcset"),h.zoomedHd.removeAttribute("sizes"),h.zoomedHd.src=h.zoomed.getAttribute("data-zoom-src"),h.zoomedHd.onerror=function(){clearInterval(a),console.warn("Unable to reach the zoom image target "+h.zoomedHd.src),h.zoomedHd=null,i()};var a=setInterval(function(){h.zoomedHd.complete&&(clearInterval(a),h.zoomedHd.classList.add("medium-zoom-image--opened"),h.zoomedHd.addEventListener("click",u),document.body.appendChild(h.zoomedHd),i())},10)}else if(h.original.hasAttribute("srcset")){h.zoomedHd=h.zoomed.cloneNode(),h.zoomedHd.removeAttribute("sizes");var l=h.zoomedHd.addEventListener("load",function(){h.zoomedHd.removeEventListener("load",l),h.zoomedHd.classList.add("medium-zoom-image--opened"),h.zoomedHd.addEventListener("click",u),document.body.appendChild(h.zoomedHd),i()})}else i()}})},u=function(){return new l(function(e){!v&&h.original?(v=!0,document.body.classList.remove("medium-zoom--opened"),h.zoomed.style.transform="",h.zoomedHd&&(h.zoomedHd.style.transform=""),h.template&&(h.template.style.transition="opacity 150ms",h.template.style.opacity=0),h.original.dispatchEvent(r("medium-zoom:close",{detail:{zoom:b}})),h.zoomed.addEventListener("transitionend",function t(){h.original.classList.remove("medium-zoom-image--hidden"),document.body.removeChild(h.zoomed),h.zoomedHd&&document.body.removeChild(h.zoomedHd),document.body.removeChild(z),h.zoomed.classList.remove("medium-zoom-image--opened"),h.template&&document.body.removeChild(h.template),v=!1,h.zoomed.removeEventListener("transitionend",t),h.original.dispatchEvent(r("medium-zoom:closed",{detail:{zoom:b}})),h.original=null,h.zoomed=null,h.zoomedHd=null,h.template=null,e(b)})):e(b)})},s=function(){var e=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).target;return h.original?u():c({target:e})},f=[],p=[],v=!1,g=0,y=a,h={original:null,zoomed:null,zoomedHd:null,template:null};"[object Object]"===Object.prototype.toString.call(d)?y=d:(d||"string"==typeof d)&&m(d);var z=function(e){var t=document.createElement("div");return t.classList.add("medium-zoom-overlay"),t.style.background=e,t}((y=e({margin:0,background:"#fff",scrollOffset:40,container:null,template:null},y)).background);document.addEventListener("click",function(e){var t=e.target;t!==z?-1!==f.indexOf(t)&&s({target:t}):u()}),document.addEventListener("keyup",function(e){27===(e.keyCode||e.which)&&u()}),document.addEventListener("scroll",function(){if(!v&&h.original){var e=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0;Math.abs(g-e)>y.scrollOffset&&setTimeout(u,150)}}),window.addEventListener("resize",u);var b={open:c,close:u,toggle:s,update:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t;if(t.background&&(z.style.background=t.background),t.container&&t.container instanceof Object&&(n.container=e({},y.container,t.container)),t.template){var i=o(t.template)?t.template:document.querySelector(t.template);n.template=i}return y=e({},y,n),f.forEach(function(e){e.dispatchEvent(r("medium-zoom:update",{detail:{zoom:b}}))}),b},clone:function(){var o=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return t(e({},y,o))},attach:m,detach:function(){for(var e=arguments.length,t=Array(e),o=0;o<e;o++)t[o]=arguments[o];h.zoomed&&u();var n=t.length>0?t.reduce(function(e,t){return[].concat(e,i(t))},[]):f;return n.forEach(function(e){e.classList.remove("medium-zoom-image"),e.dispatchEvent(r("medium-zoom:detach",{detail:{zoom:b}}))}),f=f.filter(function(e){return-1===n.indexOf(e)}),b},on:function(e,t){var o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return f.forEach(function(n){n.addEventListener("medium-zoom:"+e,t,o)}),p.push({type:"medium-zoom:"+e,listener:t,options:o}),b},off:function(e,t){var o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return f.forEach(function(n){n.removeEventListener("medium-zoom:"+e,t,o)}),p=p.filter(function(o){return!(o.type==="medium-zoom:"+e&&o.listener.toString()===t.toString())}),b},getOptions:function(){return y},getImages:function(){return f},getZoomedImage:function(){return h.original}};return b}}),function(){var e=document.querySelector(".other-services__swiper"),t=document.querySelector(".other-services__list"),o=parseInt(getComputedStyle(e).width),n=parseInt(getComputedStyle(t).width);window.onload=function(){var t=getComputedStyle(e).height;e.style.height="".concat(parseInt(t)+40,"px")},t.style.marginLeft="0px",e.addEventListener("mousedown",function(i){e.addEventListener("mouseleave",function(){e.removeEventListener("mousemove",c)}),e.addEventListener("mouseup",function i(l){if(e.removeEventListener("mousemove",c),m>=100){var u=(m=m>n-o?n-o:m)/1.5,s=l.pageX;switch(r=s<a?"left":"right",d=parseInt(t.style.marginLeft),r){case"left":if(-d>=n-o)return;u=u>n-o+d?n-o+d:u,t.style.transition="all 0.35s",t.style.marginLeft="".concat(d-u,"px");break;case"right":if(d>=0)return;u=u>-d?-d:u,t.style.transition="all 0.35s",t.style.marginLeft="".concat(d+u,"px")}setTimeout(function(){t.style.transition="all 0s"},250),e.removeEventListener("mouseup",i)}});var r,d,a=i.pageX,l=i.pageX,m=0;function c(e){var i=e.pageX,a=Math.abs(l-i);switch(d=parseInt(t.style.marginLeft),i<l?r="left":i>l?r="right":(i=l)&&(r=r),r){case"left":if(-d>=n-o)return;t.style.marginLeft="".concat(d-a,"px");break;case"right":if(d>=0)return;t.style.marginLeft="".concat(d+a,"px")}m+=a,l=i}e.addEventListener("mousemove",c)})}(),function(){var e,t=document.querySelectorAll("*[data-modal-target]"),o=document.querySelectorAll("*[data-modal-close]"),n=function(t){var o=t.currentTarget,n=o.dataset.modalTarget,d=document.getElementById(n);void 0!==e&&a(e),"service-example"===n&&function(e,t){var o=e.parentElement.querySelector(".what-you-get__item-title").textContent.replace(/\s+/g," ").trim(),n=t.querySelector(".modal__title"),i=e.dataset.modalServiceExampleImage,r=t.querySelector(".modal__image");n.textContent=o,r.src=i}(o,d),e=n,d.classList.add("visible"),document.querySelector("body").classList.add("fixed"),window.addEventListener("click",r),window.addEventListener("keydown",i)},i=function(t){"Escape"===t.key&&a(e)},r=function(t){t.target.classList.contains("modal__bg")&&a(e)},d=function(e){return a(e.currentTarget.dataset.modalClose)},a=function(e){document.getElementById(e).classList.remove("visible"),document.querySelector("body").classList.remove("fixed"),window.removeEventListener("click",r),window.removeEventListener("keydown",i)};o.forEach(function(e){return e.addEventListener("click",d)}),window.modals={openModalWindow:n,closeModalWindow:a},function(){var e=!0,o=!1,i=void 0;try{for(var r,d=t[Symbol.iterator]();!(e=(r=d.next()).done);e=!0)r.value.addEventListener("click",n)}catch(e){o=!0,i=e}finally{try{e||null==d.return||d.return()}finally{if(o)throw i}}}();var l=!0;window.HTMLDialogElement||(document.body.classList.add("no-dialog"),l=!1),button.onclick=function(){l?modal.showModal():modal.setAttribute("open",""),modal.querySelector("input").focus()},modal.addEventListener("transitionend",function(e){modal.querySelector("input").focus()})}(),function(){var e=document.querySelectorAll("*[data-scroll-link]"),t=function(e){var t=e.target,o=document.getElementById(t.dataset.scrollLink);o&&o.scrollIntoView({behavior:"smooth"})};Boolean(e)&&e.forEach(function(e){return e.addEventListener("click",t)})}(),mediumZoom("[data-zoomable]");
//# sourceMappingURL=data:application/json;charset=utf8;base64,
