"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function(e,t){"object"===("undefined"==typeof exports?"undefined":_typeof(exports))&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):window.mediumZoom=t()}(0,function(){var e=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var o=arguments[t];for(var n in o)Object.prototype.hasOwnProperty.call(o,n)&&(e[n]=o[n])}return e},t=function(e){return"IMG"===e.tagName},o=function(e){return e&&1===e.nodeType},n=function(e){return".svg"===(e.currentSrc||e.src).substr(-4).toLowerCase()},i=function(e){try{return Array.isArray(e)?e.filter(t):function(e){return NodeList.prototype.isPrototypeOf(e)}(e)?[].slice.call(e).filter(t):o(e)?[e].filter(t):"string"==typeof e?[].slice.call(document.querySelectorAll(e)).filter(t):[]}catch(e){throw new TypeError("The provided selector is invalid.\nExpects a CSS selector, a Node element, a NodeList or an array.\nSee: https://github.com/francoischalifour/medium-zoom")}},r=function(t,o){var n=e({bubbles:!1,cancelable:!1,detail:void 0},o);if("function"==typeof window.CustomEvent)return new CustomEvent(t,n);var i=document.createEvent("CustomEvent");return i.initCustomEvent(t,n.bubbles,n.cancelable,n.detail),i};return function(e,t){void 0===t&&(t={});var o=t.insertAt;if(e&&"undefined"!=typeof document){var n=document.head||document.getElementsByTagName("head")[0],i=document.createElement("style");i.type="text/css","top"===o&&n.firstChild?n.insertBefore(i,n.firstChild):n.appendChild(i),i.styleSheet?i.styleSheet.cssText=e:i.appendChild(document.createTextNode(e))}}(".medium-zoom-overlay{position:fixed;top:0;right:0;bottom:0;left:0;opacity:0;transition:opacity .3s;will-change:opacity}.medium-zoom--opened .medium-zoom-overlay{cursor:pointer;cursor:zoom-out;opacity:1}.medium-zoom-image{cursor:pointer;cursor:zoom-in;transition:transform .3s cubic-bezier(.2,0,.2,1)}.medium-zoom-image--hidden{visibility:hidden}.medium-zoom-image--opened{position:relative;cursor:pointer;cursor:zoom-out;will-change:transform}"),function t(d){var a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},c=window.Promise||function(e){function t(){}e(t,t)},l=function(){for(var e=arguments.length,t=Array(e),o=0;o<e;o++)t[o]=arguments[o];var n=t.reduce(function(e,t){return[].concat(e,i(t))},[]);return n.filter(function(e){return-1===f.indexOf(e)}).forEach(function(e){f.push(e),e.classList.add("medium-zoom-image")}),p.forEach(function(e){var t=e.type,o=e.listener,i=e.options;n.forEach(function(e){e.addEventListener(t,o,i)})}),b},m=function(){var t=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).target,i=function(){var t={width:document.documentElement.clientWidth,height:document.documentElement.clientHeight,left:0,top:0,right:0,bottom:0},i=void 0,r=void 0;if(h.container)if(h.container instanceof Object)i=(t=e({},t,h.container)).width-t.left-t.right-2*h.margin,r=t.height-t.top-t.bottom-2*h.margin;else{var d=(o(h.container)?h.container:document.querySelector(h.container)).getBoundingClientRect(),a=d.width,c=d.height,l=d.left,m=d.top;t=e({},t,{width:a,height:c,left:l,top:m})}i=i||t.width-2*h.margin,r=r||t.height-2*h.margin;var u=y.zoomedHd||y.original,s=n(u)?i:u.naturalWidth||i,f=n(u)?r:u.naturalHeight||r,p=u.getBoundingClientRect(),v=p.top,g=p.left,z=p.width,b=p.height,E=Math.min(s,i)/z,w=Math.min(f,r)/b,L=Math.min(E,w),S="scale("+L+") translate3d("+((i-z)/2-g+h.margin+t.left)/L+"px, "+((r-b)/2-v+h.margin+t.top)/L+"px, 0)";y.zoomed.style.transform=S,y.zoomedHd&&(y.zoomedHd.style.transform=S)};return new c(function(e){if(t&&-1===f.indexOf(t))e(b);else if(y.zoomed)e(b);else{if(t)y.original=t;else{if(!(f.length>0))return void e(b);var n=f;y.original=n[0]}if(y.original.dispatchEvent(r("medium-zoom:open",{detail:{zoom:b}})),g=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0,v=!0,y.zoomed=function(e){var t=e.getBoundingClientRect(),o=t.top,n=t.left,i=t.width,r=t.height,d=e.cloneNode(),a=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0,c=window.pageXOffset||document.documentElement.scrollLeft||document.body.scrollLeft||0;return d.removeAttribute("id"),d.style.position="absolute",d.style.top=o+a+"px",d.style.left=n+c+"px",d.style.width=i+"px",d.style.height=r+"px",d.style.transform="",d}(y.original),document.body.appendChild(z),h.template){var d=o(h.template)?h.template:document.querySelector(h.template);y.template=document.createElement("div"),y.template.appendChild(d.content.cloneNode(!0)),document.body.appendChild(y.template)}if(document.body.appendChild(y.zoomed),window.requestAnimationFrame(function(){document.body.classList.add("medium-zoom--opened")}),y.original.classList.add("medium-zoom-image--hidden"),y.zoomed.classList.add("medium-zoom-image--opened"),y.zoomed.addEventListener("click",u),y.zoomed.addEventListener("transitionend",function t(){v=!1,y.zoomed.removeEventListener("transitionend",t),y.original.dispatchEvent(r("medium-zoom:opened",{detail:{zoom:b}})),e(b)}),y.original.getAttribute("data-zoom-src")){y.zoomedHd=y.zoomed.cloneNode(),y.zoomedHd.removeAttribute("srcset"),y.zoomedHd.removeAttribute("sizes"),y.zoomedHd.src=y.zoomed.getAttribute("data-zoom-src"),y.zoomedHd.onerror=function(){clearInterval(a),console.warn("Unable to reach the zoom image target "+y.zoomedHd.src),y.zoomedHd=null,i()};var a=setInterval(function(){y.zoomedHd.complete&&(clearInterval(a),y.zoomedHd.classList.add("medium-zoom-image--opened"),y.zoomedHd.addEventListener("click",u),document.body.appendChild(y.zoomedHd),i())},10)}else if(y.original.hasAttribute("srcset")){y.zoomedHd=y.zoomed.cloneNode(),y.zoomedHd.removeAttribute("sizes");var c=y.zoomedHd.addEventListener("load",function(){y.zoomedHd.removeEventListener("load",c),y.zoomedHd.classList.add("medium-zoom-image--opened"),y.zoomedHd.addEventListener("click",u),document.body.appendChild(y.zoomedHd),i()})}else i()}})},u=function(){return new c(function(e){!v&&y.original?(v=!0,document.body.classList.remove("medium-zoom--opened"),y.zoomed.style.transform="",y.zoomedHd&&(y.zoomedHd.style.transform=""),y.template&&(y.template.style.transition="opacity 150ms",y.template.style.opacity=0),y.original.dispatchEvent(r("medium-zoom:close",{detail:{zoom:b}})),y.zoomed.addEventListener("transitionend",function t(){y.original.classList.remove("medium-zoom-image--hidden"),document.body.removeChild(y.zoomed),y.zoomedHd&&document.body.removeChild(y.zoomedHd),document.body.removeChild(z),y.zoomed.classList.remove("medium-zoom-image--opened"),y.template&&document.body.removeChild(y.template),v=!1,y.zoomed.removeEventListener("transitionend",t),y.original.dispatchEvent(r("medium-zoom:closed",{detail:{zoom:b}})),y.original=null,y.zoomed=null,y.zoomedHd=null,y.template=null,e(b)})):e(b)})},s=function(){var e=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).target;return y.original?u():m({target:e})},f=[],p=[],v=!1,g=0,h=a,y={original:null,zoomed:null,zoomedHd:null,template:null};"[object Object]"===Object.prototype.toString.call(d)?h=d:(d||"string"==typeof d)&&l(d);var z=function(e){var t=document.createElement("div");return t.classList.add("medium-zoom-overlay"),t.style.background=e,t}((h=e({margin:0,background:"#fff",scrollOffset:40,container:null,template:null},h)).background);document.addEventListener("click",function(e){var t=e.target;t!==z?-1!==f.indexOf(t)&&s({target:t}):u()}),document.addEventListener("keyup",function(e){27===(e.keyCode||e.which)&&u()}),document.addEventListener("scroll",function(){if(!v&&y.original){var e=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0;Math.abs(g-e)>h.scrollOffset&&setTimeout(u,150)}}),window.addEventListener("resize",u);var b={open:m,close:u,toggle:s,update:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t;if(t.background&&(z.style.background=t.background),t.container&&t.container instanceof Object&&(n.container=e({},h.container,t.container)),t.template){var i=o(t.template)?t.template:document.querySelector(t.template);n.template=i}return h=e({},h,n),f.forEach(function(e){e.dispatchEvent(r("medium-zoom:update",{detail:{zoom:b}}))}),b},clone:function(){var o=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return t(e({},h,o))},attach:l,detach:function(){for(var e=arguments.length,t=Array(e),o=0;o<e;o++)t[o]=arguments[o];y.zoomed&&u();var n=t.length>0?t.reduce(function(e,t){return[].concat(e,i(t))},[]):f;return n.forEach(function(e){e.classList.remove("medium-zoom-image"),e.dispatchEvent(r("medium-zoom:detach",{detail:{zoom:b}}))}),f=f.filter(function(e){return-1===n.indexOf(e)}),b},on:function(e,t){var o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return f.forEach(function(n){n.addEventListener("medium-zoom:"+e,t,o)}),p.push({type:"medium-zoom:"+e,listener:t,options:o}),b},off:function(e,t){var o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return f.forEach(function(n){n.removeEventListener("medium-zoom:"+e,t,o)}),p=p.filter(function(o){return!(o.type==="medium-zoom:"+e&&o.listener.toString()===t.toString())}),b},getOptions:function(){return h},getImages:function(){return f},getZoomedImage:function(){return y.original}};return b}}),function(){var e=n()?"touchstart":"mousedown",t=n()?"touchend":"mouseup",o=n()?"touchmove":"mousemove";function n(){return document.documentElement.clientWidth<1024}console.log(e);var i=document.querySelector(".other-services__swiper"),r=document.querySelector(".other-services__list"),d=parseInt(getComputedStyle(i).width),a=parseInt(getComputedStyle(r).width);window.onload=function(){var e=getComputedStyle(i).height;i.style.height="".concat(parseInt(e)+40,"px")},r.style.marginLeft="0px",i.addEventListener("".concat(e),function(e){console.log("лил░Лѕлхл╗ л▓ Swipe"),i.addEventListener("mouseleave",function(){i.removeEventListener("".concat(o),v)}),console.log("л┐ЛђлЙЛѕлхл╗ л┤л░л╗ЛїЛѕлх"),i.addEventListener("".concat(t),function e(s){i.removeEventListener("".concat(o),v);var g=n()?1.2:1.5;if(p=f>=100,n()&&(g=f>=200?.3:g),p){var h=(f=f>a-d?a-d:f)/g;switch(c=m<u?"left":"right",l=parseInt(r.style.marginLeft),c){case"left":if(-l>=a-d)return;h=h>a-d+l?a-d+l:h,r.style.transition=n()?"all 0.15s":"all 0.35s",r.style.marginLeft="".concat(l-h,"px");break;case"right":if(l>=0)return;h=h>-l?-l:h,r.style.transition=n()?"all 0.15s":"all 0.35s",r.style.marginLeft="".concat(l+h,"px")}setTimeout(function(){r.style.transition="all 0s"},250),i.removeEventListener("".concat(t),e)}});var c,l,m,u=n()?e.touches[0].pageX:e.pageX,s=n()?e.touches[0].pageX:e.pageX,f=0,p=!1;function v(e){console.log("лил░Лѕлхл╗ л▓ moveOn");var t=n()?e.touches[0].pageX:e.pageX,o=Math.abs(s-t);switch(l=parseInt(r.style.marginLeft),t<s?c="left":t>s?c="right":(t=s)&&(c=c),c){case"left":if(-l>=a-d)return;r.style.marginLeft="".concat(l-o,"px");break;case"right":if(l>=0)return;r.style.marginLeft="".concat(l+o,"px")}f+=o,s=t,m=n()?e.touches[0].pageX:e.pageX}i.addEventListener("".concat(o),v),console.log("л┤л░л╗ЛїЛѕлх")})}(),function(){var e,t=document.querySelectorAll("*[data-modal-target]"),o=document.querySelectorAll("*[data-modal-close]"),n=function(t){var o=t.currentTarget,n=o.dataset.modalTarget,d=document.getElementById(n);void 0!==e&&a(e),"service-example"===n&&function(e,t){var o=e.parentElement.querySelector(".what-you-get__item-title").textContent.replace(/\s+/g," ").trim(),n=t.querySelector(".modal__title"),i=e.dataset.modalServiceExampleImage,r=t.querySelector(".modal__image");n.textContent=o,r.src=i}(o,d),e=n,d.classList.add("visible"),document.querySelector("body").classList.add("fixed"),window.addEventListener("click",r),window.addEventListener("keydown",i)},i=function(t){"Escape"===t.key&&a(e)},r=function(t){t.target.classList.contains("modal__bg")&&a(e)},d=function(e){return a(e.currentTarget.dataset.modalClose)},a=function(e){document.getElementById(e).classList.remove("visible"),document.querySelector("body").classList.remove("fixed"),window.removeEventListener("click",r),window.removeEventListener("keydown",i)};o.forEach(function(e){return e.addEventListener("click",d)}),window.modals={openModalWindow:n,closeModalWindow:a},function(){var e=!0,o=!1,i=void 0;try{for(var r,d=t[Symbol.iterator]();!(e=(r=d.next()).done);e=!0)r.value.addEventListener("click",n)}catch(e){o=!0,i=e}finally{try{e||null==d.return||d.return()}finally{if(o)throw i}}}()}(),function(){var e=document.querySelectorAll("*[data-scroll-link]"),t=function(e){var t=e.target,o=document.getElementById(t.dataset.scrollLink);o&&o.scrollIntoView({behavior:"smooth"})};Boolean(e)&&e.forEach(function(e){return e.addEventListener("click",t)})}(),mediumZoom("[data-zoomable]");
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJnbG9iYWwiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIl90eXBlb2YiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJ3aW5kb3ciLCJtZWRpdW1ab29tIiwiX2V4dGVuZHMiLCJPYmplY3QiLCJhc3NpZ24iLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwicHJvdG90eXBlIiwiY2FsbCIsImtleSIsImlzU3VwcG9ydGVkIiwibm9kZSIsInRhZ05hbWUiLCJzZWxlY3RvciIsIm5vZGVUeXBlIiwiaXNTdmciLCJpbWFnZSIsImN1cnJlbnRTcmMiLCJpc1Byb3RvdHlwZU9mIiwiZ2V0SW1hZ2VzRnJvbVNlbGVjdG9yIiwiaXNOb2RlIiwiZmlsdGVyIiwiTm9kZUxpc3QiLCJpc05vZGVMaXN0IiwiaXNBcnJheSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJlcnIiLCJjcmVhdGVDdXN0b21FdmVudCIsInR5cGUiLCJwYXJhbXMiLCJldmVudFBhcmFtcyIsImNsb25lVGFyZ2V0IiwiX3RlbXBsYXRlJGdldEJvdW5kaW5nIiwidG9wIiwibGVmdCIsIndpZHRoIiwiaGVpZ2h0IiwiY2xvbmUiLCJkb2N1bWVudCIsImNsb25lTm9kZSIsImN1c3RvbUV2ZW50IiwiaW5pdEN1c3RvbUV2ZW50IiwicGFnZVlPZmZzZXQiLCJkb2N1bWVudEVsZW1lbnQiLCJzY3JvbGxUb3AiLCJzY3JvbGxMZWZ0IiwiYWN0aXZlIiwiY3NzIiwicmVmIiwib3JpZ2luYWwiLCJ6b29tZWQiLCJpbnNlcnRBdCIsImhlYWQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInN0eWxlIiwiY3JlYXRlRWxlbWVudCIsImlzQW5pbWF0aW5nIiwiY2xhc3NMaXN0IiwiaW5zZXJ0QmVmb3JlIiwiZmlyc3RDaGlsZCIsInRlbXBsYXRlIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJhcHBlbmRDaGlsZCIsImRpc3BhdGNoRXZlbnQiLCJzdHlsZUluamVjdCIsInBvc2l0aW9uIiwidW5kZWZpbmVkIiwiUHJvbWlzZSIsImZuIiwiYXR0YWNoIiwiX2xlbiIsInNlbGVjdG9ycyIsIkFycmF5IiwiX2tleSIsImV2ZW50Iiwid2hpY2giLCJpbWFnZXNBY2N1bXVsYXRvciIsImN1cnJlbnRTZWxlY3RvciIsImNsb3NlIiwiY29uY2F0IiwibmV3SW1hZ2VzIiwibmV3SW1hZ2UiLCJpbWFnZXMiLCJpbmRleE9mIiwidXBkYXRlIiwib3B0aW9ucyIsInB1c2giLCJuZXdPcHRpb25zIiwiZXZlbnRMaXN0ZW5lcnMiLCJiYWNrZ3JvdW5kIiwiX3JlZiIsIm92ZXJsYXkiLCJsaXN0ZW5lciIsImZvckVhY2giLCJhZGRFdmVudExpc3RlbmVyIiwiem9vbSIsIm9wZW4iLCJkZXRhY2giLCJfYW5pbWF0ZSIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0IiwicmlnaHQiLCJib3R0b20iLCJ2aWV3cG9ydFdpZHRoIiwidmlld3BvcnRIZWlnaHQiLCJpbWFnZXNUb0RldGFjaCIsInJlbW92ZSIsImRldGFpbCIsInpvb21PcHRpb25zIiwiY29udGFpbmVyIiwibWFyZ2luIiwiX3pvb21Db250YWluZXIkZ2V0Qm91IiwicXVlcnlTZWxlY3RvciIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIl93aWR0aCIsIl9oZWlnaHQiLCJfbGVmdCIsIl90b3AiLCJ6b29tVGFyZ2V0Iiwiem9vbWVkSGQiLCJuYXR1cmFsV2lkdGgiLCJuYXR1cmFsSGVpZ2h0IiwiX3pvb21UYXJnZXQkZ2V0Qm91bmRpIiwic2NhbGVZIiwiTWF0aCIsIm1pbiIsInNjYWxlWCIsInRyYW5zZm9ybSIsInNjYWxlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImV2ZW50TGlzdGVuZXIiLCJyZXNvbHZlIiwiYm9keSIsInNsaWNlIiwicGFnZVhPZmZzZXQiLCJyZW1vdmVBdHRyaWJ1dGUiLCJjcmVhdGVPdmVybGF5IiwiY29udGVudCIsIl9oYW5kbGVPcGVuRW5kIiwiX3JlZjIiLCJzcmMiLCJnZXRBdHRyaWJ1dGUiLCJ0cmFuc2xhdGVYIiwidHJhbnNsYXRlWSIsImNvbXBsZXRlIiwiZ2V0Wm9vbVRhcmdldFNpemUiLCJhZGQiLCJoYXNBdHRyaWJ1dGUiLCJsb2FkRXZlbnRMaXN0ZW5lciIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIl9oYW5kbGVDbG9zZUVuZCIsInJlbW92ZUNoaWxkIiwiY2xlYXJJbnRlcnZhbCIsImNvbnNvbGUiLCJ3YXJuIiwidG9TdHJpbmciLCJjYW5jZWxhYmxlIiwidG9nZ2xlIiwia2V5Q29kZSIsImNyZWF0ZUV2ZW50IiwiY3VycmVudFNjcm9sbCIsImFicyIsInNjcm9sbE9mZnNldCIsIl9oYW5kbGVDbGljayIsIl9rZXkyIiwicmVkdWNlIiwib24iLCJvZmYiLCJ0b3VjaERldmljZSIsIl9yZWYzIiwic3RhcnRFdmVudCIsInN3aXBlciIsImdldE9wdGlvbnMiLCJzd2lwZXJXaWR0aCIsImdldENvbXB1dGVkU3R5bGUiLCJzd2lwZXJMaXN0V2lkdGgiLCJwYXJzZUludCIsInN3aXBlckxpc3QiLCJvbmxvYWQiLCJoZWlnaHRPZlN3aXBlciIsIm1hcmdpbkxlZnQiLCJzdW1tU3dpcGVEaXN0YW5jZSIsIm1vdmVFdmVudCIsInN3aXBlTW91c2VNb3ZlT24iLCJsb2ciLCJzd2lwZU1vdXNlTW92ZU9mZiIsInN3aXBlU3BlZWQiLCJpc0Zhc3RTd2lwZSIsImxhc3RDdXJzb3JQb3NpdGlvbiIsImZpcnN0Q3Vyc29yUG9zaXRpb24iLCJ3YXlUb1doaWNoU3dpcGVJc01hZGUiLCJkZXZpY2VXaWR0aCIsInN3aXBlTGlzdE1hcmdpbkxlZnQiLCJhZGRpdGlvbmFsU3dpcGVEaXN0YW5jZSIsInRyYW5zaXRpb24iLCJzd2l0Y2hPZmZTd2lwZXIiLCJlbmRFdmVudCIsInRvdWNoZXMiLCJwYWdlWCIsImluaXRpYWxDdXJzb3JQb3NpdGlvbiIsIm5ld0N1cnNvclBvc2l0aW9uIiwiZ2V0SW1hZ2VzIiwiZ2V0Wm9vbWVkSW1hZ2UiLCJzd2lwZURpc3RhbmNlIiwib3Blbk1vZGFsV2luZG93IiwiZXZ0IiwiZGF0YXNldCIsIm1vZGFsVGFyZ2V0Iiwib3BlbmVkTW9kYWxJRCIsIm1vZGFsSUQiLCJyZXBsYWNlIiwidHJpbSIsIm1vZGFsVGl0bGUiLCJ0YXJnZXRNb2RhbCIsInBhdGhUb0ltYWdlIiwibW9kYWxTZXJ2aWNlRXhhbXBsZUltYWdlIiwic2V0VGltZW91dCIsInRleHRDb250ZW50Iiwic2VydmljZVRpdGxlIiwiY3JlYXRlSGVhZGVyT2ZTZXJ2aWNlRXhhbXBsZU1vZGFsIiwiY2xvc2VNb2RhbEJ5QmFja2dyb3VuZCIsImNsb3NlTW9kYWxCeUVzYyIsImNsb3NlTW9kYWxXaW5kb3ciLCJjb250YWlucyIsImN1cnJlbnRUYXJnZXQiLCJtb2RhbENsb3NlIiwibW9kYWxUcmlnZ2VycyIsImluaXRpYWxpemVNb2RhbFRyaWdnZXJzIiwic2Nyb2xsaW5nTGlua3MiLCJjbG9zZU1vZGFsQnV0dG9ucyIsImdldEVsZW1lbnRCeUlkIiwic2Nyb2xsTGluayIsInNjcm9sbFRvIiwic2Nyb2xsSW50b1ZpZXciLCJsaW5rIiwic2Nyb2xsVG9FbGVtZW50Il0sIm1hcHBpbmdzIjoiQUFBQSwrUEFHQSxTQUFVQSxFQUFRQyxHQUNLLFlBQW5CLG9CQUFPQyxRQUFQLFlBQUFDLFFBQU9ELFdBQTBDLG9CQUFYRSxPQUF5QkEsT0FBT0YsUUFBVUQsSUFBOEIsbUJBQVhJLFFBQXlCQSxPQUFPQyxJQUFNRCxPQUFPSixHQUFXTSxPQUFPQyxXQUFhUCxJQURuTCxDQUFBLEVBQVVELFdBQVYsSUFBQVMsRUFFV0MsT0FBV0MsUUFBQSxTQUFBQyxHQUNsQixJQUFBLElBQUFDLEVBQUEsRUFBQUEsRUFBQUMsVUFBQUMsT0FBQUYsSUFBQSxDQUdJLElBQUlHLEVBQVNGLFVBQVVELEdBRnZCSixJQUFBQSxJQUFXQyxLQUFPQyxFQUNWRCxPQUFPTyxVQUFHSCxlQUFwQkksS0FBMkNGLEVBQUFHLEtBQ3JDSCxFQUFTRixHQUFBQSxFQUFiSyxJQUdJUCxPQUFBQSxHQUVIUSxFQUFBLFNBQUFDLEdBQ0YsTUFBQSxRQUFBQSxFQUFBQyxT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Q25CK00sRUFBSjNLLFNBQUFpTSxlQUFBck8sRUFBQTZNLFFBQUF5QixZQUVNM0IsR0FDSjRCLEVBQVlDLGVBQU9ULENBQ2JmLFNBQVVoTixZQVNoQm9OLFFBQUFBLElBQ0FoTCxFQUFTMkUsUUFBYyxTQUFBMEgsR0FBQSxPQUFRbEwsRUFBQUEsaUJBQS9CLFFBQUFtTCxLQWxCSCxHQTZGRDlPLFdBQVciLCJmaWxlIjoiYXBwLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuXHJcbi8qISBtZWRpdW0tem9vbSAxLjAuNCB8IE1JVCBMaWNlbnNlIHwgaHR0cHM6Ly9naXRodWIuY29tL2ZyYW5jb2lzY2hhbGlmb3VyL21lZGl1bS16b29tICovXHJcbihmdW5jdGlvbihnbG9iYWwsIGZhY3RvcnkpIHtcclxuICAgIHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUgIT09IFwidW5kZWZpbmVkXCIgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6IHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDogd2luZG93Lm1lZGl1bVpvb20gPSBmYWN0b3J5KCk7XHJcbiAgfSkodGhpcywgZnVuY3Rpb24oKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIHZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odGFyZ2V0KSB7XHJcbiAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XHJcbiAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xyXG4gICAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gdGFyZ2V0O1xyXG4gICAgfTtcclxuICAgIHZhciBpc1N1cHBvcnRlZCA9IGZ1bmN0aW9uIGlzU3VwcG9ydGVkKG5vZGUpIHtcclxuICAgICAgcmV0dXJuIG5vZGUudGFnTmFtZSA9PT0gXCJJTUdcIjtcclxuICAgIH07XHJcbiAgICB2YXIgaXNOb2RlTGlzdCA9IGZ1bmN0aW9uIGlzTm9kZUxpc3Qoc2VsZWN0b3IpIHtcclxuICAgICAgcmV0dXJuIE5vZGVMaXN0LnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKHNlbGVjdG9yKTtcclxuICAgIH07XHJcbiAgICB2YXIgaXNOb2RlID0gZnVuY3Rpb24gaXNOb2RlKHNlbGVjdG9yKSB7XHJcbiAgICAgIHJldHVybiBzZWxlY3RvciAmJiBzZWxlY3Rvci5ub2RlVHlwZSA9PT0gMTtcclxuICAgIH07XHJcbiAgICB2YXIgaXNTdmcgPSBmdW5jdGlvbiBpc1N2ZyhpbWFnZSkge1xyXG4gICAgICB2YXIgc291cmNlID0gaW1hZ2UuY3VycmVudFNyYyB8fCBpbWFnZS5zcmM7XHJcbiAgICAgIHJldHVybiBzb3VyY2Uuc3Vic3RyKC00KS50b0xvd2VyQ2FzZSgpID09PSBcIi5zdmdcIjtcclxuICAgIH07XHJcbiAgICB2YXIgZ2V0SW1hZ2VzRnJvbVNlbGVjdG9yID0gZnVuY3Rpb24gZ2V0SW1hZ2VzRnJvbVNlbGVjdG9yKHNlbGVjdG9yKSB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc2VsZWN0b3IpKSB7XHJcbiAgICAgICAgICByZXR1cm4gc2VsZWN0b3IuZmlsdGVyKGlzU3VwcG9ydGVkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGlzTm9kZUxpc3Qoc2VsZWN0b3IpKSB7XHJcbiAgICAgICAgICByZXR1cm4gW10uc2xpY2UuY2FsbChzZWxlY3RvcikuZmlsdGVyKGlzU3VwcG9ydGVkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGlzTm9kZShzZWxlY3RvcikpIHtcclxuICAgICAgICAgIHJldHVybiBbIHNlbGVjdG9yIF0uZmlsdGVyKGlzU3VwcG9ydGVkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgcmV0dXJuIFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpLmZpbHRlcihpc1N1cHBvcnRlZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBbXTtcclxuICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlRoZSBwcm92aWRlZCBzZWxlY3RvciBpcyBpbnZhbGlkLlxcblwiICsgXCJFeHBlY3RzIGEgQ1NTIHNlbGVjdG9yLCBhIE5vZGUgZWxlbWVudCwgYSBOb2RlTGlzdCBvciBhbiBhcnJheS5cXG5cIiArIFwiU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZnJhbmNvaXNjaGFsaWZvdXIvbWVkaXVtLXpvb21cIik7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICB2YXIgY3JlYXRlT3ZlcmxheSA9IGZ1bmN0aW9uIGNyZWF0ZU92ZXJsYXkoYmFja2dyb3VuZCkge1xyXG4gICAgICB2YXIgb3ZlcmxheSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgIG92ZXJsYXkuY2xhc3NMaXN0LmFkZChcIm1lZGl1bS16b29tLW92ZXJsYXlcIik7XHJcbiAgICAgIG92ZXJsYXkuc3R5bGUuYmFja2dyb3VuZCA9IGJhY2tncm91bmQ7XHJcbiAgICAgIHJldHVybiBvdmVybGF5O1xyXG4gICAgfTtcclxuICAgIHZhciBjbG9uZVRhcmdldCA9IGZ1bmN0aW9uIGNsb25lVGFyZ2V0KHRlbXBsYXRlKSB7XHJcbiAgICAgIHZhciBfdGVtcGxhdGUkZ2V0Qm91bmRpbmcgPSB0ZW1wbGF0ZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwgdG9wID0gX3RlbXBsYXRlJGdldEJvdW5kaW5nLnRvcCwgbGVmdCA9IF90ZW1wbGF0ZSRnZXRCb3VuZGluZy5sZWZ0LCB3aWR0aCA9IF90ZW1wbGF0ZSRnZXRCb3VuZGluZy53aWR0aCwgaGVpZ2h0ID0gX3RlbXBsYXRlJGdldEJvdW5kaW5nLmhlaWdodDtcclxuICAgICAgdmFyIGNsb25lID0gdGVtcGxhdGUuY2xvbmVOb2RlKCk7XHJcbiAgICAgIHZhciBzY3JvbGxUb3AgPSB3aW5kb3cucGFnZVlPZmZzZXQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCB8fCAwO1xyXG4gICAgICB2YXIgc2Nyb2xsTGVmdCA9IHdpbmRvdy5wYWdlWE9mZnNldCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbExlZnQgfHwgMDtcclxuICAgICAgY2xvbmUucmVtb3ZlQXR0cmlidXRlKFwiaWRcIik7XHJcbiAgICAgIGNsb25lLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xyXG4gICAgICBjbG9uZS5zdHlsZS50b3AgPSB0b3AgKyBzY3JvbGxUb3AgKyBcInB4XCI7XHJcbiAgICAgIGNsb25lLnN0eWxlLmxlZnQgPSBsZWZ0ICsgc2Nyb2xsTGVmdCArIFwicHhcIjtcclxuICAgICAgY2xvbmUuc3R5bGUud2lkdGggPSB3aWR0aCArIFwicHhcIjtcclxuICAgICAgY2xvbmUuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0ICsgXCJweFwiO1xyXG4gICAgICBjbG9uZS5zdHlsZS50cmFuc2Zvcm0gPSBcIlwiO1xyXG4gICAgICByZXR1cm4gY2xvbmU7XHJcbiAgICB9O1xyXG4gICAgdmFyIGNyZWF0ZUN1c3RvbUV2ZW50ID0gZnVuY3Rpb24gY3JlYXRlQ3VzdG9tRXZlbnQodHlwZSwgcGFyYW1zKSB7XHJcbiAgICAgIHZhciBldmVudFBhcmFtcyA9IF9leHRlbmRzKHtcclxuICAgICAgICBidWJibGVzOiBmYWxzZSxcclxuICAgICAgICBjYW5jZWxhYmxlOiBmYWxzZSxcclxuICAgICAgICBkZXRhaWw6IHVuZGVmaW5lZFxyXG4gICAgICB9LCBwYXJhbXMpO1xyXG4gICAgICBpZiAodHlwZW9mIHdpbmRvdy5DdXN0b21FdmVudCA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDdXN0b21FdmVudCh0eXBlLCBldmVudFBhcmFtcyk7XHJcbiAgICAgIH1cclxuICAgICAgdmFyIGN1c3RvbUV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJDdXN0b21FdmVudFwiKTtcclxuICAgICAgY3VzdG9tRXZlbnQuaW5pdEN1c3RvbUV2ZW50KHR5cGUsIGV2ZW50UGFyYW1zLmJ1YmJsZXMsIGV2ZW50UGFyYW1zLmNhbmNlbGFibGUsIGV2ZW50UGFyYW1zLmRldGFpbCk7XHJcbiAgICAgIHJldHVybiBjdXN0b21FdmVudDtcclxuICAgIH07XHJcbiAgICB2YXIgbWVkaXVtWm9vbSA9IGZ1bmN0aW9uIG1lZGl1bVpvb20oc2VsZWN0b3IpIHtcclxuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xyXG4gICAgICB2YXIgUHJvbWlzZSA9IHdpbmRvdy5Qcm9taXNlIHx8IGZ1bmN0aW9uIFByb21pc2UoZm4pIHtcclxuICAgICAgICBmdW5jdGlvbiBub29wKCkge31cclxuICAgICAgICBmbihub29wLCBub29wKTtcclxuICAgICAgfTtcclxuICAgICAgdmFyIF9oYW5kbGVDbGljayA9IGZ1bmN0aW9uIF9oYW5kbGVDbGljayhldmVudCkge1xyXG4gICAgICAgIHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7XHJcbiAgICAgICAgaWYgKHRhcmdldCA9PT0gb3ZlcmxheSkge1xyXG4gICAgICAgICAgY2xvc2UoKTtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGltYWdlcy5pbmRleE9mKHRhcmdldCkgPT09IC0xKSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRvZ2dsZSh7XHJcbiAgICAgICAgICB0YXJnZXQ6IHRhcmdldFxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9O1xyXG4gICAgICB2YXIgX2hhbmRsZVNjcm9sbCA9IGZ1bmN0aW9uIF9oYW5kbGVTY3JvbGwoKSB7XHJcbiAgICAgICAgaWYgKGlzQW5pbWF0aW5nIHx8ICFhY3RpdmUub3JpZ2luYWwpIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGN1cnJlbnRTY3JvbGwgPSB3aW5kb3cucGFnZVlPZmZzZXQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCB8fCAwO1xyXG4gICAgICAgIGlmIChNYXRoLmFicyhzY3JvbGxUb3AgLSBjdXJyZW50U2Nyb2xsKSA+IHpvb21PcHRpb25zLnNjcm9sbE9mZnNldCkge1xyXG4gICAgICAgICAgc2V0VGltZW91dChjbG9zZSwgMTUwKTtcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcbiAgICAgIHZhciBfaGFuZGxlS2V5VXAgPSBmdW5jdGlvbiBfaGFuZGxlS2V5VXAoZXZlbnQpIHtcclxuICAgICAgICBpZiAoKGV2ZW50LmtleUNvZGUgfHwgZXZlbnQud2hpY2gpID09PSAyNykge1xyXG4gICAgICAgICAgY2xvc2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcbiAgICAgIHZhciB1cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoKSB7XHJcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xyXG4gICAgICAgIHZhciBuZXdPcHRpb25zID0gb3B0aW9ucztcclxuICAgICAgICBpZiAob3B0aW9ucy5iYWNrZ3JvdW5kKSB7XHJcbiAgICAgICAgICBvdmVybGF5LnN0eWxlLmJhY2tncm91bmQgPSBvcHRpb25zLmJhY2tncm91bmQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvcHRpb25zLmNvbnRhaW5lciAmJiBvcHRpb25zLmNvbnRhaW5lciBpbnN0YW5jZW9mIE9iamVjdCkge1xyXG4gICAgICAgICAgbmV3T3B0aW9ucy5jb250YWluZXIgPSBfZXh0ZW5kcyh7fSwgem9vbU9wdGlvbnMuY29udGFpbmVyLCBvcHRpb25zLmNvbnRhaW5lcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvcHRpb25zLnRlbXBsYXRlKSB7XHJcbiAgICAgICAgICB2YXIgdGVtcGxhdGUgPSBpc05vZGUob3B0aW9ucy50ZW1wbGF0ZSkgPyBvcHRpb25zLnRlbXBsYXRlIDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihvcHRpb25zLnRlbXBsYXRlKTtcclxuICAgICAgICAgIG5ld09wdGlvbnMudGVtcGxhdGUgPSB0ZW1wbGF0ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgem9vbU9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgem9vbU9wdGlvbnMsIG5ld09wdGlvbnMpO1xyXG4gICAgICAgIGltYWdlcy5mb3JFYWNoKGZ1bmN0aW9uKGltYWdlKSB7XHJcbiAgICAgICAgICBpbWFnZS5kaXNwYXRjaEV2ZW50KGNyZWF0ZUN1c3RvbUV2ZW50KFwibWVkaXVtLXpvb206dXBkYXRlXCIsIHtcclxuICAgICAgICAgICAgZGV0YWlsOiB7XHJcbiAgICAgICAgICAgICAgem9vbTogem9vbVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHpvb207XHJcbiAgICAgIH07XHJcbiAgICAgIHZhciBjbG9uZSA9IGZ1bmN0aW9uIGNsb25lKCkge1xyXG4gICAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcclxuICAgICAgICByZXR1cm4gbWVkaXVtWm9vbShfZXh0ZW5kcyh7fSwgem9vbU9wdGlvbnMsIG9wdGlvbnMpKTtcclxuICAgICAgfTtcclxuICAgICAgdmFyIGF0dGFjaCA9IGZ1bmN0aW9uIGF0dGFjaCgpIHtcclxuICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgc2VsZWN0b3JzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XHJcbiAgICAgICAgICBzZWxlY3RvcnNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBuZXdJbWFnZXMgPSBzZWxlY3RvcnMucmVkdWNlKGZ1bmN0aW9uKGltYWdlc0FjY3VtdWxhdG9yLCBjdXJyZW50U2VsZWN0b3IpIHtcclxuICAgICAgICAgIHJldHVybiBbXS5jb25jYXQoaW1hZ2VzQWNjdW11bGF0b3IsIGdldEltYWdlc0Zyb21TZWxlY3RvcihjdXJyZW50U2VsZWN0b3IpKTtcclxuICAgICAgICB9LCBbXSk7XHJcbiAgICAgICAgbmV3SW1hZ2VzLmZpbHRlcihmdW5jdGlvbihuZXdJbWFnZSkge1xyXG4gICAgICAgICAgcmV0dXJuIGltYWdlcy5pbmRleE9mKG5ld0ltYWdlKSA9PT0gLTE7XHJcbiAgICAgICAgfSkuZm9yRWFjaChmdW5jdGlvbihuZXdJbWFnZSkge1xyXG4gICAgICAgICAgaW1hZ2VzLnB1c2gobmV3SW1hZ2UpO1xyXG4gICAgICAgICAgbmV3SW1hZ2UuY2xhc3NMaXN0LmFkZChcIm1lZGl1bS16b29tLWltYWdlXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGV2ZW50TGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24oX3JlZikge1xyXG4gICAgICAgICAgdmFyIHR5cGUgPSBfcmVmLnR5cGUsIGxpc3RlbmVyID0gX3JlZi5saXN0ZW5lciwgb3B0aW9ucyA9IF9yZWYub3B0aW9ucztcclxuICAgICAgICAgIG5ld0ltYWdlcy5mb3JFYWNoKGZ1bmN0aW9uKGltYWdlKSB7XHJcbiAgICAgICAgICAgIGltYWdlLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIsIG9wdGlvbnMpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHpvb207XHJcbiAgICAgIH07XHJcbiAgICAgIHZhciBkZXRhY2ggPSBmdW5jdGlvbiBkZXRhY2goKSB7XHJcbiAgICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBzZWxlY3RvcnMgPSBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xyXG4gICAgICAgICAgc2VsZWN0b3JzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhY3RpdmUuem9vbWVkKSB7XHJcbiAgICAgICAgICBjbG9zZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgaW1hZ2VzVG9EZXRhY2ggPSBzZWxlY3RvcnMubGVuZ3RoID4gMCA/IHNlbGVjdG9ycy5yZWR1Y2UoZnVuY3Rpb24oaW1hZ2VzQWNjdW11bGF0b3IsIGN1cnJlbnRTZWxlY3Rvcikge1xyXG4gICAgICAgICAgcmV0dXJuIFtdLmNvbmNhdChpbWFnZXNBY2N1bXVsYXRvciwgZ2V0SW1hZ2VzRnJvbVNlbGVjdG9yKGN1cnJlbnRTZWxlY3RvcikpO1xyXG4gICAgICAgIH0sIFtdKSA6IGltYWdlcztcclxuICAgICAgICBpbWFnZXNUb0RldGFjaC5mb3JFYWNoKGZ1bmN0aW9uKGltYWdlKSB7XHJcbiAgICAgICAgICBpbWFnZS5jbGFzc0xpc3QucmVtb3ZlKFwibWVkaXVtLXpvb20taW1hZ2VcIik7XHJcbiAgICAgICAgICBpbWFnZS5kaXNwYXRjaEV2ZW50KGNyZWF0ZUN1c3RvbUV2ZW50KFwibWVkaXVtLXpvb206ZGV0YWNoXCIsIHtcclxuICAgICAgICAgICAgZGV0YWlsOiB7XHJcbiAgICAgICAgICAgICAgem9vbTogem9vbVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaW1hZ2VzID0gaW1hZ2VzLmZpbHRlcihmdW5jdGlvbihpbWFnZSkge1xyXG4gICAgICAgICAgcmV0dXJuIGltYWdlc1RvRGV0YWNoLmluZGV4T2YoaW1hZ2UpID09PSAtMTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gem9vbTtcclxuICAgICAgfTtcclxuICAgICAgdmFyIG9uID0gZnVuY3Rpb24gb24odHlwZSwgbGlzdGVuZXIpIHtcclxuICAgICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XHJcbiAgICAgICAgaW1hZ2VzLmZvckVhY2goZnVuY3Rpb24oaW1hZ2UpIHtcclxuICAgICAgICAgIGltYWdlLmFkZEV2ZW50TGlzdGVuZXIoXCJtZWRpdW0tem9vbTpcIiArIHR5cGUsIGxpc3RlbmVyLCBvcHRpb25zKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBldmVudExpc3RlbmVycy5wdXNoKHtcclxuICAgICAgICAgIHR5cGU6IFwibWVkaXVtLXpvb206XCIgKyB0eXBlLFxyXG4gICAgICAgICAgbGlzdGVuZXI6IGxpc3RlbmVyLFxyXG4gICAgICAgICAgb3B0aW9uczogb3B0aW9uc1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB6b29tO1xyXG4gICAgICB9O1xyXG4gICAgICB2YXIgb2ZmID0gZnVuY3Rpb24gb2ZmKHR5cGUsIGxpc3RlbmVyKSB7XHJcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xyXG4gICAgICAgIGltYWdlcy5mb3JFYWNoKGZ1bmN0aW9uKGltYWdlKSB7XHJcbiAgICAgICAgICBpbWFnZS5yZW1vdmVFdmVudExpc3RlbmVyKFwibWVkaXVtLXpvb206XCIgKyB0eXBlLCBsaXN0ZW5lciwgb3B0aW9ucyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgZXZlbnRMaXN0ZW5lcnMgPSBldmVudExpc3RlbmVycy5maWx0ZXIoZnVuY3Rpb24oZXZlbnRMaXN0ZW5lcikge1xyXG4gICAgICAgICAgcmV0dXJuICEoZXZlbnRMaXN0ZW5lci50eXBlID09PSBcIm1lZGl1bS16b29tOlwiICsgdHlwZSAmJiBldmVudExpc3RlbmVyLmxpc3RlbmVyLnRvU3RyaW5nKCkgPT09IGxpc3RlbmVyLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB6b29tO1xyXG4gICAgICB9O1xyXG4gICAgICB2YXIgb3BlbiA9IGZ1bmN0aW9uIG9wZW4oKSB7XHJcbiAgICAgICAgdmFyIF9yZWYyID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fSwgdGFyZ2V0ID0gX3JlZjIudGFyZ2V0O1xyXG4gICAgICAgIHZhciBfYW5pbWF0ZSA9IGZ1bmN0aW9uIF9hbmltYXRlKCkge1xyXG4gICAgICAgICAgdmFyIGNvbnRhaW5lciA9IHtcclxuICAgICAgICAgICAgd2lkdGg6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCxcclxuICAgICAgICAgICAgaGVpZ2h0OiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0LFxyXG4gICAgICAgICAgICBsZWZ0OiAwLFxyXG4gICAgICAgICAgICB0b3A6IDAsXHJcbiAgICAgICAgICAgIHJpZ2h0OiAwLFxyXG4gICAgICAgICAgICBib3R0b206IDBcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgICB2YXIgdmlld3BvcnRXaWR0aCA9IHZvaWQgMDtcclxuICAgICAgICAgIHZhciB2aWV3cG9ydEhlaWdodCA9IHZvaWQgMDtcclxuICAgICAgICAgIGlmICh6b29tT3B0aW9ucy5jb250YWluZXIpIHtcclxuICAgICAgICAgICAgaWYgKHpvb21PcHRpb25zLmNvbnRhaW5lciBpbnN0YW5jZW9mIE9iamVjdCkge1xyXG4gICAgICAgICAgICAgIGNvbnRhaW5lciA9IF9leHRlbmRzKHt9LCBjb250YWluZXIsIHpvb21PcHRpb25zLmNvbnRhaW5lcik7XHJcbiAgICAgICAgICAgICAgdmlld3BvcnRXaWR0aCA9IGNvbnRhaW5lci53aWR0aCAtIGNvbnRhaW5lci5sZWZ0IC0gY29udGFpbmVyLnJpZ2h0IC0gem9vbU9wdGlvbnMubWFyZ2luICogMjtcclxuICAgICAgICAgICAgICB2aWV3cG9ydEhlaWdodCA9IGNvbnRhaW5lci5oZWlnaHQgLSBjb250YWluZXIudG9wIC0gY29udGFpbmVyLmJvdHRvbSAtIHpvb21PcHRpb25zLm1hcmdpbiAqIDI7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgdmFyIHpvb21Db250YWluZXIgPSBpc05vZGUoem9vbU9wdGlvbnMuY29udGFpbmVyKSA/IHpvb21PcHRpb25zLmNvbnRhaW5lciA6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioem9vbU9wdGlvbnMuY29udGFpbmVyKTtcclxuICAgICAgICAgICAgICB2YXIgX3pvb21Db250YWluZXIkZ2V0Qm91ID0gem9vbUNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwgX3dpZHRoID0gX3pvb21Db250YWluZXIkZ2V0Qm91LndpZHRoLCBfaGVpZ2h0ID0gX3pvb21Db250YWluZXIkZ2V0Qm91LmhlaWdodCwgX2xlZnQgPSBfem9vbUNvbnRhaW5lciRnZXRCb3UubGVmdCwgX3RvcCA9IF96b29tQ29udGFpbmVyJGdldEJvdS50b3A7XHJcbiAgICAgICAgICAgICAgY29udGFpbmVyID0gX2V4dGVuZHMoe30sIGNvbnRhaW5lciwge1xyXG4gICAgICAgICAgICAgICAgd2lkdGg6IF93aWR0aCxcclxuICAgICAgICAgICAgICAgIGhlaWdodDogX2hlaWdodCxcclxuICAgICAgICAgICAgICAgIGxlZnQ6IF9sZWZ0LFxyXG4gICAgICAgICAgICAgICAgdG9wOiBfdG9wXHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHZpZXdwb3J0V2lkdGggPSB2aWV3cG9ydFdpZHRoIHx8IGNvbnRhaW5lci53aWR0aCAtIHpvb21PcHRpb25zLm1hcmdpbiAqIDI7XHJcbiAgICAgICAgICB2aWV3cG9ydEhlaWdodCA9IHZpZXdwb3J0SGVpZ2h0IHx8IGNvbnRhaW5lci5oZWlnaHQgLSB6b29tT3B0aW9ucy5tYXJnaW4gKiAyO1xyXG4gICAgICAgICAgdmFyIHpvb21UYXJnZXQgPSBhY3RpdmUuem9vbWVkSGQgfHwgYWN0aXZlLm9yaWdpbmFsO1xyXG4gICAgICAgICAgdmFyIG5hdHVyYWxXaWR0aCA9IGlzU3ZnKHpvb21UYXJnZXQpID8gdmlld3BvcnRXaWR0aCA6IHpvb21UYXJnZXQubmF0dXJhbFdpZHRoIHx8IHZpZXdwb3J0V2lkdGg7XHJcbiAgICAgICAgICB2YXIgbmF0dXJhbEhlaWdodCA9IGlzU3ZnKHpvb21UYXJnZXQpID8gdmlld3BvcnRIZWlnaHQgOiB6b29tVGFyZ2V0Lm5hdHVyYWxIZWlnaHQgfHwgdmlld3BvcnRIZWlnaHQ7XHJcbiAgICAgICAgICB2YXIgX3pvb21UYXJnZXQkZ2V0Qm91bmRpID0gem9vbVRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwgdG9wID0gX3pvb21UYXJnZXQkZ2V0Qm91bmRpLnRvcCwgbGVmdCA9IF96b29tVGFyZ2V0JGdldEJvdW5kaS5sZWZ0LCB3aWR0aCA9IF96b29tVGFyZ2V0JGdldEJvdW5kaS53aWR0aCwgaGVpZ2h0ID0gX3pvb21UYXJnZXQkZ2V0Qm91bmRpLmhlaWdodDtcclxuICAgICAgICAgIHZhciBzY2FsZVggPSBNYXRoLm1pbihuYXR1cmFsV2lkdGgsIHZpZXdwb3J0V2lkdGgpIC8gd2lkdGg7XHJcbiAgICAgICAgICB2YXIgc2NhbGVZID0gTWF0aC5taW4obmF0dXJhbEhlaWdodCwgdmlld3BvcnRIZWlnaHQpIC8gaGVpZ2h0O1xyXG4gICAgICAgICAgdmFyIHNjYWxlID0gTWF0aC5taW4oc2NhbGVYLCBzY2FsZVkpO1xyXG4gICAgICAgICAgdmFyIHRyYW5zbGF0ZVggPSAoLWxlZnQgKyAodmlld3BvcnRXaWR0aCAtIHdpZHRoKSAvIDIgKyB6b29tT3B0aW9ucy5tYXJnaW4gKyBjb250YWluZXIubGVmdCkgLyBzY2FsZTtcclxuICAgICAgICAgIHZhciB0cmFuc2xhdGVZID0gKC10b3AgKyAodmlld3BvcnRIZWlnaHQgLSBoZWlnaHQpIC8gMiArIHpvb21PcHRpb25zLm1hcmdpbiArIGNvbnRhaW5lci50b3ApIC8gc2NhbGU7XHJcbiAgICAgICAgICB2YXIgdHJhbnNmb3JtID0gXCJzY2FsZShcIiArIHNjYWxlICsgXCIpIHRyYW5zbGF0ZTNkKFwiICsgdHJhbnNsYXRlWCArIFwicHgsIFwiICsgdHJhbnNsYXRlWSArIFwicHgsIDApXCI7XHJcbiAgICAgICAgICBhY3RpdmUuem9vbWVkLnN0eWxlLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcclxuICAgICAgICAgIGlmIChhY3RpdmUuem9vbWVkSGQpIHtcclxuICAgICAgICAgICAgYWN0aXZlLnpvb21lZEhkLnN0eWxlLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKSB7XHJcbiAgICAgICAgICBpZiAodGFyZ2V0ICYmIGltYWdlcy5pbmRleE9mKHRhcmdldCkgPT09IC0xKSB7XHJcbiAgICAgICAgICAgIHJlc29sdmUoem9vbSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHZhciBfaGFuZGxlT3BlbkVuZCA9IGZ1bmN0aW9uIF9oYW5kbGVPcGVuRW5kKCkge1xyXG4gICAgICAgICAgICBpc0FuaW1hdGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBhY3RpdmUuem9vbWVkLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0cmFuc2l0aW9uZW5kXCIsIF9oYW5kbGVPcGVuRW5kKTtcclxuICAgICAgICAgICAgYWN0aXZlLm9yaWdpbmFsLmRpc3BhdGNoRXZlbnQoY3JlYXRlQ3VzdG9tRXZlbnQoXCJtZWRpdW0tem9vbTpvcGVuZWRcIiwge1xyXG4gICAgICAgICAgICAgIGRldGFpbDoge1xyXG4gICAgICAgICAgICAgICAgem9vbTogem9vbVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICByZXNvbHZlKHpvb20pO1xyXG4gICAgICAgICAgfTtcclxuICAgICAgICAgIGlmIChhY3RpdmUuem9vbWVkKSB7XHJcbiAgICAgICAgICAgIHJlc29sdmUoem9vbSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmICh0YXJnZXQpIHtcclxuICAgICAgICAgICAgYWN0aXZlLm9yaWdpbmFsID0gdGFyZ2V0O1xyXG4gICAgICAgICAgfSBlbHNlIGlmIChpbWFnZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICB2YXIgX2ltYWdlcyA9IGltYWdlcztcclxuICAgICAgICAgICAgYWN0aXZlLm9yaWdpbmFsID0gX2ltYWdlc1swXTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJlc29sdmUoem9vbSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGFjdGl2ZS5vcmlnaW5hbC5kaXNwYXRjaEV2ZW50KGNyZWF0ZUN1c3RvbUV2ZW50KFwibWVkaXVtLXpvb206b3BlblwiLCB7XHJcbiAgICAgICAgICAgIGRldGFpbDoge1xyXG4gICAgICAgICAgICAgIHpvb206IHpvb21cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgc2Nyb2xsVG9wID0gd2luZG93LnBhZ2VZT2Zmc2V0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgfHwgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AgfHwgMDtcclxuICAgICAgICAgIGlzQW5pbWF0aW5nID0gdHJ1ZTtcclxuICAgICAgICAgIGFjdGl2ZS56b29tZWQgPSBjbG9uZVRhcmdldChhY3RpdmUub3JpZ2luYWwpO1xyXG4gICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChvdmVybGF5KTtcclxuICAgICAgICAgIGlmICh6b29tT3B0aW9ucy50ZW1wbGF0ZSkge1xyXG4gICAgICAgICAgICB2YXIgdGVtcGxhdGUgPSBpc05vZGUoem9vbU9wdGlvbnMudGVtcGxhdGUpID8gem9vbU9wdGlvbnMudGVtcGxhdGUgOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHpvb21PcHRpb25zLnRlbXBsYXRlKTtcclxuICAgICAgICAgICAgYWN0aXZlLnRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICAgICAgYWN0aXZlLnRlbXBsYXRlLmFwcGVuZENoaWxkKHRlbXBsYXRlLmNvbnRlbnQuY2xvbmVOb2RlKHRydWUpKTtcclxuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhY3RpdmUudGVtcGxhdGUpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhY3RpdmUuem9vbWVkKTtcclxuICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZChcIm1lZGl1bS16b29tLS1vcGVuZWRcIik7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIGFjdGl2ZS5vcmlnaW5hbC5jbGFzc0xpc3QuYWRkKFwibWVkaXVtLXpvb20taW1hZ2UtLWhpZGRlblwiKTtcclxuICAgICAgICAgIGFjdGl2ZS56b29tZWQuY2xhc3NMaXN0LmFkZChcIm1lZGl1bS16b29tLWltYWdlLS1vcGVuZWRcIik7XHJcbiAgICAgICAgICBhY3RpdmUuem9vbWVkLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBjbG9zZSk7XHJcbiAgICAgICAgICBhY3RpdmUuem9vbWVkLmFkZEV2ZW50TGlzdGVuZXIoXCJ0cmFuc2l0aW9uZW5kXCIsIF9oYW5kbGVPcGVuRW5kKTtcclxuICAgICAgICAgIGlmIChhY3RpdmUub3JpZ2luYWwuZ2V0QXR0cmlidXRlKFwiZGF0YS16b29tLXNyY1wiKSkge1xyXG4gICAgICAgICAgICBhY3RpdmUuem9vbWVkSGQgPSBhY3RpdmUuem9vbWVkLmNsb25lTm9kZSgpO1xyXG4gICAgICAgICAgICBhY3RpdmUuem9vbWVkSGQucmVtb3ZlQXR0cmlidXRlKFwic3Jjc2V0XCIpO1xyXG4gICAgICAgICAgICBhY3RpdmUuem9vbWVkSGQucmVtb3ZlQXR0cmlidXRlKFwic2l6ZXNcIik7XHJcbiAgICAgICAgICAgIGFjdGl2ZS56b29tZWRIZC5zcmMgPSBhY3RpdmUuem9vbWVkLmdldEF0dHJpYnV0ZShcImRhdGEtem9vbS1zcmNcIik7XHJcbiAgICAgICAgICAgIGFjdGl2ZS56b29tZWRIZC5vbmVycm9yID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChnZXRab29tVGFyZ2V0U2l6ZSk7XHJcbiAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiVW5hYmxlIHRvIHJlYWNoIHRoZSB6b29tIGltYWdlIHRhcmdldCBcIiArIGFjdGl2ZS56b29tZWRIZC5zcmMpO1xyXG4gICAgICAgICAgICAgIGFjdGl2ZS56b29tZWRIZCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgX2FuaW1hdGUoKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdmFyIGdldFpvb21UYXJnZXRTaXplID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgaWYgKGFjdGl2ZS56b29tZWRIZC5jb21wbGV0ZSkge1xyXG4gICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChnZXRab29tVGFyZ2V0U2l6ZSk7XHJcbiAgICAgICAgICAgICAgICBhY3RpdmUuem9vbWVkSGQuY2xhc3NMaXN0LmFkZChcIm1lZGl1bS16b29tLWltYWdlLS1vcGVuZWRcIik7XHJcbiAgICAgICAgICAgICAgICBhY3RpdmUuem9vbWVkSGQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGNsb3NlKTtcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYWN0aXZlLnpvb21lZEhkKTtcclxuICAgICAgICAgICAgICAgIF9hbmltYXRlKCk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCAxMCk7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKGFjdGl2ZS5vcmlnaW5hbC5oYXNBdHRyaWJ1dGUoXCJzcmNzZXRcIikpIHtcclxuICAgICAgICAgICAgYWN0aXZlLnpvb21lZEhkID0gYWN0aXZlLnpvb21lZC5jbG9uZU5vZGUoKTtcclxuICAgICAgICAgICAgYWN0aXZlLnpvb21lZEhkLnJlbW92ZUF0dHJpYnV0ZShcInNpemVzXCIpO1xyXG4gICAgICAgICAgICB2YXIgbG9hZEV2ZW50TGlzdGVuZXIgPSBhY3RpdmUuem9vbWVkSGQuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgYWN0aXZlLnpvb21lZEhkLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGxvYWRFdmVudExpc3RlbmVyKTtcclxuICAgICAgICAgICAgICBhY3RpdmUuem9vbWVkSGQuY2xhc3NMaXN0LmFkZChcIm1lZGl1bS16b29tLWltYWdlLS1vcGVuZWRcIik7XHJcbiAgICAgICAgICAgICAgYWN0aXZlLnpvb21lZEhkLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBjbG9zZSk7XHJcbiAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhY3RpdmUuem9vbWVkSGQpO1xyXG4gICAgICAgICAgICAgIF9hbmltYXRlKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgX2FuaW1hdGUoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfTtcclxuICAgICAgdmFyIGNsb3NlID0gZnVuY3Rpb24gY2xvc2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUpIHtcclxuICAgICAgICAgIGlmIChpc0FuaW1hdGluZyB8fCAhYWN0aXZlLm9yaWdpbmFsKSB7XHJcbiAgICAgICAgICAgIHJlc29sdmUoem9vbSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHZhciBfaGFuZGxlQ2xvc2VFbmQgPSBmdW5jdGlvbiBfaGFuZGxlQ2xvc2VFbmQoKSB7XHJcbiAgICAgICAgICAgIGFjdGl2ZS5vcmlnaW5hbC5jbGFzc0xpc3QucmVtb3ZlKFwibWVkaXVtLXpvb20taW1hZ2UtLWhpZGRlblwiKTtcclxuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChhY3RpdmUuem9vbWVkKTtcclxuICAgICAgICAgICAgaWYgKGFjdGl2ZS56b29tZWRIZCkge1xyXG4gICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoYWN0aXZlLnpvb21lZEhkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKG92ZXJsYXkpO1xyXG4gICAgICAgICAgICBhY3RpdmUuem9vbWVkLmNsYXNzTGlzdC5yZW1vdmUoXCJtZWRpdW0tem9vbS1pbWFnZS0tb3BlbmVkXCIpO1xyXG4gICAgICAgICAgICBpZiAoYWN0aXZlLnRlbXBsYXRlKSB7XHJcbiAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChhY3RpdmUudGVtcGxhdGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlzQW5pbWF0aW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGFjdGl2ZS56b29tZWQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRyYW5zaXRpb25lbmRcIiwgX2hhbmRsZUNsb3NlRW5kKTtcclxuICAgICAgICAgICAgYWN0aXZlLm9yaWdpbmFsLmRpc3BhdGNoRXZlbnQoY3JlYXRlQ3VzdG9tRXZlbnQoXCJtZWRpdW0tem9vbTpjbG9zZWRcIiwge1xyXG4gICAgICAgICAgICAgIGRldGFpbDoge1xyXG4gICAgICAgICAgICAgICAgem9vbTogem9vbVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICBhY3RpdmUub3JpZ2luYWwgPSBudWxsO1xyXG4gICAgICAgICAgICBhY3RpdmUuem9vbWVkID0gbnVsbDtcclxuICAgICAgICAgICAgYWN0aXZlLnpvb21lZEhkID0gbnVsbDtcclxuICAgICAgICAgICAgYWN0aXZlLnRlbXBsYXRlID0gbnVsbDtcclxuICAgICAgICAgICAgcmVzb2x2ZSh6b29tKTtcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgICBpc0FuaW1hdGluZyA9IHRydWU7XHJcbiAgICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoXCJtZWRpdW0tem9vbS0tb3BlbmVkXCIpO1xyXG4gICAgICAgICAgYWN0aXZlLnpvb21lZC5zdHlsZS50cmFuc2Zvcm0gPSBcIlwiO1xyXG4gICAgICAgICAgaWYgKGFjdGl2ZS56b29tZWRIZCkge1xyXG4gICAgICAgICAgICBhY3RpdmUuem9vbWVkSGQuc3R5bGUudHJhbnNmb3JtID0gXCJcIjtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmIChhY3RpdmUudGVtcGxhdGUpIHtcclxuICAgICAgICAgICAgYWN0aXZlLnRlbXBsYXRlLnN0eWxlLnRyYW5zaXRpb24gPSBcIm9wYWNpdHkgMTUwbXNcIjtcclxuICAgICAgICAgICAgYWN0aXZlLnRlbXBsYXRlLnN0eWxlLm9wYWNpdHkgPSAwO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgYWN0aXZlLm9yaWdpbmFsLmRpc3BhdGNoRXZlbnQoY3JlYXRlQ3VzdG9tRXZlbnQoXCJtZWRpdW0tem9vbTpjbG9zZVwiLCB7XHJcbiAgICAgICAgICAgIGRldGFpbDoge1xyXG4gICAgICAgICAgICAgIHpvb206IHpvb21cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgYWN0aXZlLnpvb21lZC5hZGRFdmVudExpc3RlbmVyKFwidHJhbnNpdGlvbmVuZFwiLCBfaGFuZGxlQ2xvc2VFbmQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9O1xyXG4gICAgICB2YXIgdG9nZ2xlID0gZnVuY3Rpb24gdG9nZ2xlKCkge1xyXG4gICAgICAgIHZhciBfcmVmMyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge30sIHRhcmdldCA9IF9yZWYzLnRhcmdldDtcclxuICAgICAgICBpZiAoYWN0aXZlLm9yaWdpbmFsKSB7XHJcbiAgICAgICAgICByZXR1cm4gY2xvc2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG9wZW4oe1xyXG4gICAgICAgICAgdGFyZ2V0OiB0YXJnZXRcclxuICAgICAgICB9KTtcclxuICAgICAgfTtcclxuICAgICAgdmFyIGdldE9wdGlvbnMgPSBmdW5jdGlvbiBnZXRPcHRpb25zKCkge1xyXG4gICAgICAgIHJldHVybiB6b29tT3B0aW9ucztcclxuICAgICAgfTtcclxuICAgICAgdmFyIGdldEltYWdlcyA9IGZ1bmN0aW9uIGdldEltYWdlcygpIHtcclxuICAgICAgICByZXR1cm4gaW1hZ2VzO1xyXG4gICAgICB9O1xyXG4gICAgICB2YXIgZ2V0Wm9vbWVkSW1hZ2UgPSBmdW5jdGlvbiBnZXRab29tZWRJbWFnZSgpIHtcclxuICAgICAgICByZXR1cm4gYWN0aXZlLm9yaWdpbmFsO1xyXG4gICAgICB9O1xyXG4gICAgICB2YXIgaW1hZ2VzID0gW107XHJcbiAgICAgIHZhciBldmVudExpc3RlbmVycyA9IFtdO1xyXG4gICAgICB2YXIgaXNBbmltYXRpbmcgPSBmYWxzZTtcclxuICAgICAgdmFyIHNjcm9sbFRvcCA9IDA7XHJcbiAgICAgIHZhciB6b29tT3B0aW9ucyA9IG9wdGlvbnM7XHJcbiAgICAgIHZhciBhY3RpdmUgPSB7XHJcbiAgICAgICAgb3JpZ2luYWw6IG51bGwsXHJcbiAgICAgICAgem9vbWVkOiBudWxsLFxyXG4gICAgICAgIHpvb21lZEhkOiBudWxsLFxyXG4gICAgICAgIHRlbXBsYXRlOiBudWxsXHJcbiAgICAgIH07XHJcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc2VsZWN0b3IpID09PSBcIltvYmplY3QgT2JqZWN0XVwiKSB7XHJcbiAgICAgICAgem9vbU9wdGlvbnMgPSBzZWxlY3RvcjtcclxuICAgICAgfSBlbHNlIGlmIChzZWxlY3RvciB8fCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICBhdHRhY2goc2VsZWN0b3IpO1xyXG4gICAgICB9XHJcbiAgICAgIHpvb21PcHRpb25zID0gX2V4dGVuZHMoe1xyXG4gICAgICAgIG1hcmdpbjogMCxcclxuICAgICAgICBiYWNrZ3JvdW5kOiBcIiNmZmZcIixcclxuICAgICAgICBzY3JvbGxPZmZzZXQ6IDQwLFxyXG4gICAgICAgIGNvbnRhaW5lcjogbnVsbCxcclxuICAgICAgICB0ZW1wbGF0ZTogbnVsbFxyXG4gICAgICB9LCB6b29tT3B0aW9ucyk7XHJcbiAgICAgIHZhciBvdmVybGF5ID0gY3JlYXRlT3ZlcmxheSh6b29tT3B0aW9ucy5iYWNrZ3JvdW5kKTtcclxuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIF9oYW5kbGVDbGljayk7XHJcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLCBfaGFuZGxlS2V5VXApO1xyXG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIF9oYW5kbGVTY3JvbGwpO1xyXG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBjbG9zZSk7XHJcbiAgICAgIHZhciB6b29tID0ge1xyXG4gICAgICAgIG9wZW46IG9wZW4sXHJcbiAgICAgICAgY2xvc2U6IGNsb3NlLFxyXG4gICAgICAgIHRvZ2dsZTogdG9nZ2xlLFxyXG4gICAgICAgIHVwZGF0ZTogdXBkYXRlLFxyXG4gICAgICAgIGNsb25lOiBjbG9uZSxcclxuICAgICAgICBhdHRhY2g6IGF0dGFjaCxcclxuICAgICAgICBkZXRhY2g6IGRldGFjaCxcclxuICAgICAgICBvbjogb24sXHJcbiAgICAgICAgb2ZmOiBvZmYsXHJcbiAgICAgICAgZ2V0T3B0aW9uczogZ2V0T3B0aW9ucyxcclxuICAgICAgICBnZXRJbWFnZXM6IGdldEltYWdlcyxcclxuICAgICAgICBnZXRab29tZWRJbWFnZTogZ2V0Wm9vbWVkSW1hZ2VcclxuICAgICAgfTtcclxuICAgICAgcmV0dXJuIHpvb207XHJcbiAgICB9O1xyXG4gICAgZnVuY3Rpb24gc3R5bGVJbmplY3QoY3NzLCByZWYpIHtcclxuICAgICAgaWYgKHJlZiA9PT0gdm9pZCAwKSByZWYgPSB7fTtcclxuICAgICAgdmFyIGluc2VydEF0ID0gcmVmLmluc2VydEF0O1xyXG4gICAgICBpZiAoIWNzcyB8fCB0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgdmFyIGhlYWQgPSBkb2N1bWVudC5oZWFkIHx8IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaGVhZFwiKVswXTtcclxuICAgICAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xyXG4gICAgICBzdHlsZS50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xyXG4gICAgICBpZiAoaW5zZXJ0QXQgPT09IFwidG9wXCIpIHtcclxuICAgICAgICBpZiAoaGVhZC5maXJzdENoaWxkKSB7XHJcbiAgICAgICAgICBoZWFkLmluc2VydEJlZm9yZShzdHlsZSwgaGVhZC5maXJzdENoaWxkKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGhlYWQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XHJcbiAgICAgICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICB2YXIgY3NzID0gXCIubWVkaXVtLXpvb20tb3ZlcmxheXtwb3NpdGlvbjpmaXhlZDt0b3A6MDtyaWdodDowO2JvdHRvbTowO2xlZnQ6MDtvcGFjaXR5OjA7dHJhbnNpdGlvbjpvcGFjaXR5IC4zczt3aWxsLWNoYW5nZTpvcGFjaXR5fS5tZWRpdW0tem9vbS0tb3BlbmVkIC5tZWRpdW0tem9vbS1vdmVybGF5e2N1cnNvcjpwb2ludGVyO2N1cnNvcjp6b29tLW91dDtvcGFjaXR5OjF9Lm1lZGl1bS16b29tLWltYWdle2N1cnNvcjpwb2ludGVyO2N1cnNvcjp6b29tLWluO3RyYW5zaXRpb246dHJhbnNmb3JtIC4zcyBjdWJpYy1iZXppZXIoLjIsMCwuMiwxKX0ubWVkaXVtLXpvb20taW1hZ2UtLWhpZGRlbnt2aXNpYmlsaXR5OmhpZGRlbn0ubWVkaXVtLXpvb20taW1hZ2UtLW9wZW5lZHtwb3NpdGlvbjpyZWxhdGl2ZTtjdXJzb3I6cG9pbnRlcjtjdXJzb3I6em9vbS1vdXQ7d2lsbC1jaGFuZ2U6dHJhbnNmb3JtfVwiO1xyXG4gICAgc3R5bGVJbmplY3QoY3NzKTtcclxuICAgIHJldHVybiBtZWRpdW1ab29tO1xyXG4gIH0pO1xyXG4oKCkgPT4ge1xyXG5cclxuICAgIGNvbnN0IHN0YXJ0RXZlbnQgPSB0b3VjaERldmljZSgpID8gJ3RvdWNoc3RhcnQnOiAnbW91c2Vkb3duJztcclxuICAgIGNvbnN0IGVuZEV2ZW50ID0gdG91Y2hEZXZpY2UoKSA/ICd0b3VjaGVuZCc6ICdtb3VzZXVwJztcclxuICAgIGNvbnN0IG1vdmVFdmVudCA9IHRvdWNoRGV2aWNlKCkgPyAndG91Y2htb3ZlJzogJ21vdXNlbW92ZSc7XHJcblxyXG4gICAgY29uc29sZS5sb2coc3RhcnRFdmVudCk7XHJcblxyXG4gICAgZnVuY3Rpb24gdG91Y2hEZXZpY2UoKSB7XHJcbiAgICAgICAgY29uc3QgZGV2aWNlV2lkdGggPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGg7XHJcbiAgICAgICAgcmV0dXJuIChkZXZpY2VXaWR0aCA8IDEwMjQpID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGxldFxyXG4gICAgICAgIHN3aXBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5vdGhlci1zZXJ2aWNlc19fc3dpcGVyJyksXHJcbiAgICAgICAgc3dpcGVyTGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5vdGhlci1zZXJ2aWNlc19fbGlzdCcpLFxyXG4gICAgICAgIHN3aXBlcldpZHRoID0gcGFyc2VJbnQoZ2V0Q29tcHV0ZWRTdHlsZShzd2lwZXIpLndpZHRoKSxcclxuICAgICAgICBzd2lwZXJMaXN0V2lkdGggPSBwYXJzZUludChnZXRDb21wdXRlZFN0eWxlKHN3aXBlckxpc3QpLndpZHRoKTtcclxuXHJcblxyXG4gICAgd2luZG93Lm9ubG9hZCA9ICgpID0+IHtcclxuICAgICAgICBsZXQgaGVpZ2h0T2ZTd2lwZXIgPSBnZXRDb21wdXRlZFN0eWxlKHN3aXBlcikuaGVpZ2h0O1xyXG4gICAgICAgIHN3aXBlci5zdHlsZS5oZWlnaHQgPSBgJHtwYXJzZUludChoZWlnaHRPZlN3aXBlcikgKyA0MH1weGA7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHN3aXBlckxpc3Quc3R5bGUubWFyZ2luTGVmdCA9ICcwcHgnO1xyXG5cclxuXHJcbiAgICBmdW5jdGlvbiBzd2lwZShldmVudCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCfQt9Cw0YjQtdC7INCyIFN3aXBlJyk7XHJcblxyXG4gICAgICAgIHN3aXBlci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgc3dpdGNoT2ZmU3dpcGVyKTtcclxuICAgICAgICBjb25zb2xlLmxvZygn0L/RgNC+0YjQtdC7INC00LDQu9GM0YjQtScpO1xyXG4gICAgICAgIGZ1bmN0aW9uIHN3aXRjaE9mZlN3aXBlcigpIHtcclxuICAgICAgICAgICAgc3dpcGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoYCR7bW92ZUV2ZW50fWAsIHN3aXBlTW91c2VNb3ZlT24pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgXHJcbiAgICAgICAgc3dpcGVyLmFkZEV2ZW50TGlzdGVuZXIoYCR7ZW5kRXZlbnR9YCwgc3dpcGVNb3VzZU1vdmVPZmYpOyAvLyA8LS0tINC/0L7Qv9GA0L7QsdGD0Lkg0YHRjtC00LAg0LLRgdGC0LDQstC40YLRjCBsYXN0IGN1cnNvciBwb3NcclxuXHJcbiAgICAgICAgbGV0XHJcbiAgICAgICAgICAgIGZpcnN0Q3Vyc29yUG9zaXRpb24gPSB0b3VjaERldmljZSgpID8gZXZlbnQudG91Y2hlc1swXS5wYWdlWCA6IGV2ZW50LnBhZ2VYLFxyXG4gICAgICAgICAgICBpbml0aWFsQ3Vyc29yUG9zaXRpb24gPSB0b3VjaERldmljZSgpID8gZXZlbnQudG91Y2hlc1swXS5wYWdlWCA6IGV2ZW50LnBhZ2VYLFxyXG4gICAgICAgICAgICBzdW1tU3dpcGVEaXN0YW5jZSA9IDAsXHJcbiAgICAgICAgICAgIHdheVRvV2hpY2hTd2lwZUlzTWFkZSxcclxuICAgICAgICAgICAgc3dpcGVMaXN0TWFyZ2luTGVmdCxcclxuICAgICAgICAgICAgaXNGYXN0U3dpcGUgPSBmYWxzZTtcclxuXHJcblxyXG4gICAgICAgIGxldCBsYXN0Q3Vyc29yUG9zaXRpb247XHJcblxyXG4gICAgICAgIHN3aXBlci5hZGRFdmVudExpc3RlbmVyKGAke21vdmVFdmVudH1gLCBzd2lwZU1vdXNlTW92ZU9uKTtcclxuICAgICAgICBjb25zb2xlLmxvZygn0LTQsNC70YzRiNC1Jyk7XHJcbiAgICAgICAgZnVuY3Rpb24gc3dpcGVNb3VzZU1vdmVPbihldmVudCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygn0LfQsNGI0LXQuyDQsiBtb3ZlT24nKTtcclxuXHJcbiAgICAgICAgICAgIGxldFxyXG4gICAgICAgICAgICAgICAgbmV3Q3Vyc29yUG9zaXRpb24gPSB0b3VjaERldmljZSgpID8gZXZlbnQudG91Y2hlc1swXS5wYWdlWCA6IGV2ZW50LnBhZ2VYLFxyXG4gICAgICAgICAgICAgICAgLy8gdGVzdCA9IGV2ZW50LnRvdWNoZXNbMF0ucGFnZVgsXHJcbiAgICAgICAgICAgICAgICBzd2lwZURpc3RhbmNlID0gTWF0aC5hYnMoaW5pdGlhbEN1cnNvclBvc2l0aW9uIC0gbmV3Q3Vyc29yUG9zaXRpb24pO1xyXG5cclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2cobmV3Q3Vyc29yUG9zaXRpb24pO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh0ZXN0KTtcclxuXHJcbiAgICAgICAgICAgIHN3aXBlTGlzdE1hcmdpbkxlZnQgPSBwYXJzZUludChzd2lwZXJMaXN0LnN0eWxlLm1hcmdpbkxlZnQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKG5ld0N1cnNvclBvc2l0aW9uIDwgaW5pdGlhbEN1cnNvclBvc2l0aW9uKSB3YXlUb1doaWNoU3dpcGVJc01hZGUgPSAnbGVmdCc7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKG5ld0N1cnNvclBvc2l0aW9uID4gaW5pdGlhbEN1cnNvclBvc2l0aW9uKSB3YXlUb1doaWNoU3dpcGVJc01hZGUgPSAncmlnaHQnO1xyXG4gICAgICAgICAgICBlbHNlIGlmIChuZXdDdXJzb3JQb3NpdGlvbiA9IGluaXRpYWxDdXJzb3JQb3NpdGlvbikgd2F5VG9XaGljaFN3aXBlSXNNYWRlID0gd2F5VG9XaGljaFN3aXBlSXNNYWRlO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgc3dpdGNoKHdheVRvV2hpY2hTd2lwZUlzTWFkZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnbGVmdCc6XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgtc3dpcGVMaXN0TWFyZ2luTGVmdCA+PSAoc3dpcGVyTGlzdFdpZHRoIC0gc3dpcGVyV2lkdGgpKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgc3dpcGVyTGlzdC5zdHlsZS5tYXJnaW5MZWZ0ID0gYCR7c3dpcGVMaXN0TWFyZ2luTGVmdCAtIHN3aXBlRGlzdGFuY2V9cHhgO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgJ3JpZ2h0JzpcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3dpcGVMaXN0TWFyZ2luTGVmdCA+PSAwICkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIHN3aXBlckxpc3Quc3R5bGUubWFyZ2luTGVmdCA9IGAke3N3aXBlTGlzdE1hcmdpbkxlZnQgKyBzd2lwZURpc3RhbmNlfXB4YDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc3VtbVN3aXBlRGlzdGFuY2UgKz0gc3dpcGVEaXN0YW5jZTtcclxuICAgICAgICAgICAgaW5pdGlhbEN1cnNvclBvc2l0aW9uID0gbmV3Q3Vyc29yUG9zaXRpb247XHJcbiAgICAgICAgICAgIGxhc3RDdXJzb3JQb3NpdGlvbiA9IHRvdWNoRGV2aWNlKCkgPyBldmVudC50b3VjaGVzWzBdLnBhZ2VYIDogZXZlbnQucGFnZVg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBzd2lwZU1vdXNlTW92ZU9mZihldmVudCkge1xyXG4gICAgICAgICAgICBzd2lwZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihgJHttb3ZlRXZlbnR9YCwgc3dpcGVNb3VzZU1vdmVPbik7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBsZXQgc3dpcGVTcGVlZCA9IHRvdWNoRGV2aWNlKCkgPyAxLjIgOiAxLjU7XHJcblxyXG4gICAgICAgICAgICBpc0Zhc3RTd2lwZSA9IChzdW1tU3dpcGVEaXN0YW5jZSA+PSAxMDApID8gdHJ1ZSA6IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRvdWNoRGV2aWNlKCkpIHtcclxuICAgICAgICAgICAgICAgIHN3aXBlU3BlZWQgPSAoc3VtbVN3aXBlRGlzdGFuY2UgPj0gMjAwKSA/IDAuMyA6IHN3aXBlU3BlZWQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghaXNGYXN0U3dpcGUpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIHN1bW1Td2lwZURpc3RhbmNlID0gKHN1bW1Td2lwZURpc3RhbmNlID4gKHN3aXBlckxpc3RXaWR0aCAtIHN3aXBlcldpZHRoKSkgPyAoc3dpcGVyTGlzdFdpZHRoIC0gc3dpcGVyV2lkdGgpIDogc3VtbVN3aXBlRGlzdGFuY2U7XHJcblxyXG4gICAgICAgICAgICAvLyBsZXQgc3dpcGVTcGVlZCA9IHRvdWNoRGV2aWNlKCkgPyAwLjc1IDogMS41O1xyXG4gICAgICAgICAgICBsZXQgYWRkaXRpb25hbFN3aXBlRGlzdGFuY2UgPSAoc3VtbVN3aXBlRGlzdGFuY2UgLyBzd2lwZVNwZWVkKTsgLy8gPC0tLS0gY2hhbmdlIHN3aXBlIHNwZWVkLCBmb3IgZXhhbXBsZTogKHN1bW1Td2lwZURpc3RhbmNlIC8gMi41KVxyXG5cclxuXHJcbiAgICAgICAgICAgIC8vIGxldCBsYXN0Q3Vyc29yUG9zaXRpb24gPSB0b3VjaERldmljZSgpID8gZXZlbnQudG91Y2hlc1swXS5wYWdlWCA6IGV2ZW50LnBhZ2VYO1xyXG4gICAgICAgICAgICB3YXlUb1doaWNoU3dpcGVJc01hZGUgPSAobGFzdEN1cnNvclBvc2l0aW9uIDwgZmlyc3RDdXJzb3JQb3NpdGlvbikgPyAnbGVmdCcgOiAncmlnaHQnO1xyXG5cclxuICAgICAgICAgICAgc3dpcGVMaXN0TWFyZ2luTGVmdCA9IHBhcnNlSW50KHN3aXBlckxpc3Quc3R5bGUubWFyZ2luTGVmdCk7XHJcblxyXG4gICAgICAgICAgICBzd2l0Y2god2F5VG9XaGljaFN3aXBlSXNNYWRlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdsZWZ0JzpcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKC1zd2lwZUxpc3RNYXJnaW5MZWZ0ID49IChzd2lwZXJMaXN0V2lkdGggLSBzd2lwZXJXaWR0aCkpIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBhZGRpdGlvbmFsU3dpcGVEaXN0YW5jZSA9IChhZGRpdGlvbmFsU3dpcGVEaXN0YW5jZSA+ICgoc3dpcGVyTGlzdFdpZHRoIC0gc3dpcGVyV2lkdGgpICsgc3dpcGVMaXN0TWFyZ2luTGVmdCkpID8gKChzd2lwZXJMaXN0V2lkdGggLSBzd2lwZXJXaWR0aCkgKyBzd2lwZUxpc3RNYXJnaW5MZWZ0KSA6IGFkZGl0aW9uYWxTd2lwZURpc3RhbmNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzd2lwZXJMaXN0LnN0eWxlLnRyYW5zaXRpb24gPSB0b3VjaERldmljZSgpID8gJ2FsbCAwLjE1cycgOiAnYWxsIDAuMzVzJztcclxuICAgICAgICAgICAgICAgICAgICBzd2lwZXJMaXN0LnN0eWxlLm1hcmdpbkxlZnQgPSBgJHtzd2lwZUxpc3RNYXJnaW5MZWZ0IC0gYWRkaXRpb25hbFN3aXBlRGlzdGFuY2V9cHhgO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgJ3JpZ2h0JzpcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3dpcGVMaXN0TWFyZ2luTGVmdCA+PSAwICkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBhZGRpdGlvbmFsU3dpcGVEaXN0YW5jZSA9IChhZGRpdGlvbmFsU3dpcGVEaXN0YW5jZSA+IC1zd2lwZUxpc3RNYXJnaW5MZWZ0KSA/IC1zd2lwZUxpc3RNYXJnaW5MZWZ0IDogYWRkaXRpb25hbFN3aXBlRGlzdGFuY2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHN3aXBlckxpc3Quc3R5bGUudHJhbnNpdGlvbiA9IHRvdWNoRGV2aWNlKCkgPyAnYWxsIDAuMTVzJyA6ICdhbGwgMC4zNXMnO1xyXG4gICAgICAgICAgICAgICAgICAgIHN3aXBlckxpc3Quc3R5bGUubWFyZ2luTGVmdCA9IGAke3N3aXBlTGlzdE1hcmdpbkxlZnQgKyBhZGRpdGlvbmFsU3dpcGVEaXN0YW5jZX1weGA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgc3dpcGVyTGlzdC5zdHlsZS50cmFuc2l0aW9uID0gJ2FsbCAwcyc7XHJcbiAgICAgICAgICAgIH0sIDI1MCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBzd2lwZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihgJHtlbmRFdmVudH1gLCBzd2lwZU1vdXNlTW92ZU9mZik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIFxyXG5cclxuICAgIHN3aXBlci5hZGRFdmVudExpc3RlbmVyKGAke3N0YXJ0RXZlbnR9YCwgc3dpcGUpO1xyXG59KSgpO1xyXG4oKCkgPT4ge1xyXG4gIGNvbnN0IG1vZGFsVHJpZ2dlcnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcqW2RhdGEtbW9kYWwtdGFyZ2V0XScpO1xyXG4gIGNvbnN0IGNsb3NlTW9kYWxCdXR0b25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnKltkYXRhLW1vZGFsLWNsb3NlXScpO1xyXG4gIGxldCBvcGVuZWRNb2RhbElEO1xyXG5cclxuICBjb25zdCBvcGVuTW9kYWxXaW5kb3cgPSAoZXZ0KSA9PiB7XHJcbiAgICBjb25zdCB0YXJnZXQgPSBldnQuY3VycmVudFRhcmdldDtcclxuICAgIGNvbnN0IG1vZGFsSUQgPSB0YXJnZXQuZGF0YXNldC5tb2RhbFRhcmdldDtcclxuICAgIGNvbnN0IHRhcmdldE1vZGFsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobW9kYWxJRCk7XHJcblxyXG4gICAgKG9wZW5lZE1vZGFsSUQgIT09IHVuZGVmaW5lZCkgPyBjbG9zZU1vZGFsV2luZG93KG9wZW5lZE1vZGFsSUQpIDogbnVsbDtcclxuXHJcbiAgICAobW9kYWxJRCA9PT0gJ3NlcnZpY2UtZXhhbXBsZScpID8gY3JlYXRlSGVhZGVyT2ZTZXJ2aWNlRXhhbXBsZU1vZGFsKHRhcmdldCwgdGFyZ2V0TW9kYWwpIDogbnVsbDtcclxuXHJcbiAgICBvcGVuZWRNb2RhbElEID0gbW9kYWxJRDtcclxuXHJcbiAgICB0YXJnZXRNb2RhbC5jbGFzc0xpc3QuYWRkKCd2aXNpYmxlJyk7XHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5JykuY2xhc3NMaXN0LmFkZCgnZml4ZWQnKTtcclxuXHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjbG9zZU1vZGFsQnlCYWNrZ3JvdW5kKTtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgY2xvc2VNb2RhbEJ5RXNjKTtcclxuICB9O1xyXG5cclxuICBjb25zdCBjbG9zZU1vZGFsQnlFc2MgPSAoZXZ0KSA9PiB7XHJcbiAgICBpZiAoZXZ0LmtleSA9PT0gJ0VzY2FwZScpIHtcclxuICAgICAgY2xvc2VNb2RhbFdpbmRvdyhvcGVuZWRNb2RhbElEKVxyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIGNvbnN0IGNsb3NlTW9kYWxCeUJhY2tncm91bmQgPSAoZXZ0KSA9PiB7XHJcbiAgICBpZiAoZXZ0LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ21vZGFsX19iZycpKSB7XHJcbiAgICAgIGNsb3NlTW9kYWxXaW5kb3cob3BlbmVkTW9kYWxJRClcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBjb25zdCBjbG9zZU1vZGFsQnlCdXR0b24gPSAoZXZ0KSA9PiBjbG9zZU1vZGFsV2luZG93KGV2dC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQubW9kYWxDbG9zZSk7XHJcblxyXG4gIGNvbnN0IGNsb3NlTW9kYWxXaW5kb3cgPSAobW9kYWxJRCkgPT4ge1xyXG4gICAgY29uc3QgdGFyZ2V0TW9kYWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChtb2RhbElEKTtcclxuXHJcbiAgICB0YXJnZXRNb2RhbC5jbGFzc0xpc3QucmVtb3ZlKCd2aXNpYmxlJyk7XHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5JykuY2xhc3NMaXN0LnJlbW92ZSgnZml4ZWQnKTtcclxuXHJcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjbG9zZU1vZGFsQnlCYWNrZ3JvdW5kKTtcclxuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgY2xvc2VNb2RhbEJ5RXNjKTtcclxuICB9O1xyXG5cclxuICBjb25zdCBpbml0aWFsaXplTW9kYWxUcmlnZ2VycyA9ICgpID0+IHtcclxuICAgIGZvciAoY29uc3QgYnV0dG9uIG9mIG1vZGFsVHJpZ2dlcnMpIHtcclxuICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb3Blbk1vZGFsV2luZG93KTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBjbG9zZU1vZGFsQnV0dG9ucy5mb3JFYWNoKGJ1dHRvbiA9PiBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjbG9zZU1vZGFsQnlCdXR0b24pKTtcclxuXHJcbiAgd2luZG93Lm1vZGFscyA9IHtcclxuICAgIG9wZW5Nb2RhbFdpbmRvdzogb3Blbk1vZGFsV2luZG93LFxyXG4gICAgY2xvc2VNb2RhbFdpbmRvdzogY2xvc2VNb2RhbFdpbmRvdyxcclxuICB9O1xyXG5cclxuICBmdW5jdGlvbiBjcmVhdGVIZWFkZXJPZlNlcnZpY2VFeGFtcGxlTW9kYWwodGFyZ2V0LCB0YXJnZXRNb2RhbCkge1xyXG4gICAgY29uc3RcclxuICAgICAgc2VydmljZVRpdGxlID0gdGFyZ2V0LnBhcmVudEVsZW1lbnQucXVlcnlTZWxlY3RvcignLndoYXQteW91LWdldF9faXRlbS10aXRsZScpLnRleHRDb250ZW50LnJlcGxhY2UoL1xccysvZywnICcpLnRyaW0oKSxcclxuICAgICAgbW9kYWxUaXRsZSA9IHRhcmdldE1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbF9fdGl0bGUnKSxcclxuICAgICAgcGF0aFRvSW1hZ2UgPSB0YXJnZXQuZGF0YXNldC5tb2RhbFNlcnZpY2VFeGFtcGxlSW1hZ2UsXHJcbiAgICAgIG1vZGFsSW1hZ2UgPSB0YXJnZXRNb2RhbC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX2ltYWdlJyk7XHJcbiAgICBcclxuICAgIG1vZGFsVGl0bGUudGV4dENvbnRlbnQgPSBzZXJ2aWNlVGl0bGU7XHJcbiAgICBtb2RhbEltYWdlLnNyYyA9IHBhdGhUb0ltYWdlO1xyXG4gIH1cclxuXHJcbiAgaW5pdGlhbGl6ZU1vZGFsVHJpZ2dlcnMoKTtcclxufSkoKTtcclxuKCgpID0+IHtcclxuICBjb25zdCBzY3JvbGxpbmdMaW5rcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJypbZGF0YS1zY3JvbGwtbGlua10nKTtcclxuXHJcbiAgY29uc3Qgc2Nyb2xsVG9FbGVtZW50ID0gKGV2dCkgPT4ge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gZXZ0LnRhcmdldDtcclxuICAgIGNvbnN0IHNjcm9sbFRvID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGFyZ2V0LmRhdGFzZXQuc2Nyb2xsTGluayk7XHJcblxyXG4gICAgaWYgKHNjcm9sbFRvKSB7XHJcbiAgICAgIHNjcm9sbFRvLnNjcm9sbEludG9WaWV3KHtcclxuICAgICAgICBiZWhhdmlvcjogJ3Ntb290aCdcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgaWYoQm9vbGVhbihzY3JvbGxpbmdMaW5rcykpIHtcclxuICAgIHNjcm9sbGluZ0xpbmtzLmZvckVhY2gobGluayA9PiBsaW5rLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgc2Nyb2xsVG9FbGVtZW50KSk7XHJcbiAgfVxyXG59KSgpO1xyXG5cclxubWVkaXVtWm9vbSgnW2RhdGEtem9vbWFibGVdJyk7Il19
